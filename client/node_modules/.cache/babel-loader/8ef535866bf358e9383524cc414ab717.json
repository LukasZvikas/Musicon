{"ast":null,"code":"import _slicedToArray from \"/Users/lukas/Documents/GitHub/spotify-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/lukas/Documents/GitHub/spotify-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/lukas/Documents/GitHub/spotify-app/src/pages/savedSongs/index.tsx\";\n\nfunction _templateObject3() {\n  const data = _taggedTemplateLiteral([\"\\n          {\\n            userDetails {\\n              display_name\\n            }\\n          }\\n        \"]);\n\n  _templateObject3 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n  query userPlaylists($username: String!) {\\n    userPlaylistList(username: $username) {\\n      items {\\n        id\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  query SavedTracks($savedTracks: [String!]!) {\\n    savedTracks(savedTracks: $savedTracks) {\\n      id\\n      name\\n      artists {\\n        name\\n      }\\n      preview_url\\n      album {\\n        images {\\n          url\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useEffect, Fragment, useState } from \"react\";\nimport gql from \"graphql-tag\";\nimport { client } from \"../../App\";\nimport { Card } from \"./card\";\nimport { CardBody } from \"../../components/cardBody\";\nimport { Query } from \"react-apollo\";\nimport { getStorageData } from \"../../utilities/localStorage\";\nimport \"./SavedSongs.css\";\nconst SAVED_TRACKS_QUERY = gql(_templateObject());\nconst USER_PLAYLISTS_QUERY = gql(_templateObject2());\n\nconst SavedSongs = () => {\n  const songIds = getStorageData(\"saved_tracks\");\n\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        username = _useState2[0],\n        setUsername = _useState2[1];\n\n  useEffect(() => {\n    client.query({\n      query: gql(_templateObject3())\n    }).then(result => setUsername(result.data.userDetails.display_name)).catch(err => console.log(\"ERROR\", err));\n  });\n\n  const renderSongs = songs => {\n    return songs.map((song, index) => React.createElement(\"div\", {\n      className: \"d-flex justify-content-center align-items-center flex-column col-12 col-sm-6 col-md-4 p-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(Card, {\n      key: index,\n      image: song.album.images.url,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }), React.createElement(CardBody, {\n      artists: song.artists,\n      preview_url: song.preview_url,\n      name: song.name,\n      style: {\n        name: \"heading__primary-small mb-2 mt-2 text-center\",\n        artist: \"heading__secondary-small mb-4 text-center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    })));\n  };\n\n  console.log(\"usern\", username);\n  return songIds ? React.createElement(Query, {\n    query: SAVED_TRACKS_QUERY,\n    variables: {\n      savedTracks: songIds\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, props => {\n    if (props.loading) return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"Loading...\");\n    if (props.error) console.log(\"error\", props.error);else {\n      console.log(\"data\", props.data);\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, username ? React.createElement(Query, {\n        query: USER_PLAYLISTS_QUERY,\n        variables: {\n          username\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, props => {\n        if (props.loading) return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89\n          },\n          __self: this\n        }, \"Loading...\");\n        if (props.error) console.log(\"error\", props.error);else {\n          console.log(\"THE DATA\", props.data);\n          return React.createElement(\"div\", {\n            className: \"d-flex justify-content-center m-5\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 94\n            },\n            __self: this\n          });\n        }\n      }) : null, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, renderSongs(props.data.savedTracks)));\n    }\n  }) : null;\n};\n\nexport default SavedSongs;","map":{"version":3,"sources":["/Users/lukas/Documents/GitHub/spotify-app/src/pages/savedSongs/index.tsx"],"names":["React","useEffect","Fragment","useState","gql","client","Card","CardBody","Query","getStorageData","SAVED_TRACKS_QUERY","USER_PLAYLISTS_QUERY","SavedSongs","songIds","username","setUsername","query","then","result","data","userDetails","display_name","catch","err","console","log","renderSongs","songs","map","song","index","album","images","url","artists","preview_url","name","artist","savedTracks","props","loading","error"],"mappings":"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","sourcesContent":["import React, { useEffect, Fragment, useState } from \"react\";\nimport gql from \"graphql-tag\";\nimport { Button } from \"../../components/button\";\nimport { client } from \"../../App\";\nimport { Card } from \"./card\";\nimport { CardBody } from \"../../components/cardBody\";\nimport { Query } from \"react-apollo\";\nimport { getStorageData } from \"../../utilities/localStorage\";\nimport \"./SavedSongs.css\";\n\nconst SAVED_TRACKS_QUERY = gql`\n  query SavedTracks($savedTracks: [String!]!) {\n    savedTracks(savedTracks: $savedTracks) {\n      id\n      name\n      artists {\n        name\n      }\n      preview_url\n      album {\n        images {\n          url\n        }\n      }\n    }\n  }\n`;\n\nconst USER_PLAYLISTS_QUERY = gql`\n  query userPlaylists($username: String!) {\n    userPlaylistList(username: $username) {\n      items {\n        id\n      }\n    }\n  }\n`;\n\nconst SavedSongs = () => {\n  const songIds = getStorageData(\"saved_tracks\");\n  const [username, setUsername] = useState(\"\");\n\n  useEffect(() => {\n    client\n      .query({\n        query: gql`\n          {\n            userDetails {\n              display_name\n            }\n          }\n        `\n      })\n      .then(result => setUsername(result.data.userDetails.display_name))\n      .catch(err => console.log(\"ERROR\", err));\n  });\n\n  const renderSongs = (songs: any) => {\n    return songs.map((song: any, index: number) => (\n      <div className=\"d-flex justify-content-center align-items-center flex-column col-12 col-sm-6 col-md-4 p-3\">\n        <Card key={index} image={song.album.images.url} />\n        <CardBody\n          artists={song.artists}\n          preview_url={song.preview_url}\n          name={song.name}\n          style={{\n            name: \"heading__primary-small mb-2 mt-2 text-center\",\n            artist: \"heading__secondary-small mb-4 text-center\"\n          }}\n        />\n      </div>\n    ));\n  };\n\n  console.log(\"usern\", username);\n\n  return songIds ? (\n    <Query query={SAVED_TRACKS_QUERY} variables={{ savedTracks: songIds }}>\n      {(props: any) => {\n        if (props.loading) return <div>Loading...</div>;\n        if (props.error) console.log(\"error\", props.error);\n        else {\n          console.log(\"data\", props.data);\n          return (\n            <Fragment>\n              {username ? (\n                <Query query={USER_PLAYLISTS_QUERY} variables={{ username }}>\n                  {(props: any) => {\n                    if (props.loading) return <div>Loading...</div>;\n                    if (props.error) console.log(\"error\", props.error);\n                    else {\n                      console.log(\"THE DATA\", props.data);\n                      return (\n                        <div className=\"d-flex justify-content-center m-5\">\n                          {/* <select className=\"select-input\">\n                            <option>\n                              {props.data.userDetails.display_name}\n                            </option>\n                          </select> */}\n                        </div>\n                      );\n                    }\n                  }}\n                </Query>\n              ) : null}\n\n              <div className=\"row\">{renderSongs(props.data.savedTracks)}</div>\n            </Fragment>\n          );\n        }\n      }}\n    </Query>\n  ) : null;\n};\n\nexport default SavedSongs;\n"]},"metadata":{},"sourceType":"module"}