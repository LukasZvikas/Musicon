{"ast":null,"code":"import _slicedToArray from \"/Users/lukas/Documents/GitHub/spotify-app /client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/lukas/Documents/GitHub/spotify-app /client/src/pages/savedSongs/index.tsx\";\nimport React, { useEffect, useState, memo } from \"react\";\nimport { SAVED_TRACKS_QUERY, USER_PLAYLISTS_QUERY, USER_DETAILS_QUERY, ADD_TO_PLAYLIST_QUERY } from \"../../graphqlQueries\";\nimport { Button } from \"../../components/button\";\nimport { client } from \"../../App\";\nimport { Card } from \"./card\";\nimport { Modal } from \"../../components/modal\";\nimport { PlaylistModalBody } from \"./savedModalBody\";\nimport { CardBody } from \"../../components/cardBody\";\nimport { Alert } from \"../../components/alert\";\nimport { Query } from \"react-apollo\";\nimport { Spinner } from \"../../components/spinner\";\nimport { getStorageData, setStorageData } from \"../../utilities/localStorage\";\nimport \"./SavedSongs.css\";\nimport \"../../Shared.css\";\nimport { QueryError } from \"../../components/queryError\";\nconst SavedSongs = memo(props => {\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        username = _useState2[0],\n        setUsername = _useState2[1];\n\n  const _useState3 = useState({\n    id: \"\",\n    name: \"\"\n  }),\n        _useState4 = _slicedToArray(_useState3, 2),\n        currentPlaylist = _useState4[0],\n        setCurrentPlaylist = _useState4[1];\n\n  const _useState5 = useState([]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        userPlaylists = _useState6[0],\n        setUserPlaylists = _useState6[1];\n\n  const _useState7 = useState([]),\n        _useState8 = _slicedToArray(_useState7, 2),\n        songIds = _useState8[0],\n        setSongIds = _useState8[1];\n\n  const _useState9 = useState([]),\n        _useState10 = _slicedToArray(_useState9, 2),\n        savedSongs = _useState10[0],\n        setSavedSongs = _useState10[1];\n\n  const _useState11 = useState(false),\n        _useState12 = _slicedToArray(_useState11, 2),\n        modalState = _useState12[0],\n        setModalState = _useState12[1];\n\n  const _useState13 = useState(\"\"),\n        _useState14 = _slicedToArray(_useState13, 2),\n        isSavedPlaylist = _useState14[0],\n        setIsSavedPlaylist = _useState14[1];\n\n  const userQuery = fn => {\n    client.query({\n      query: USER_DETAILS_QUERY\n    }).then(({\n      data: {\n        userDetails: {\n          display_name\n        }\n      }\n    }) => {\n      fn(display_name);\n      setUsername(display_name);\n    }).catch(err => props.history.push({\n      pathname: \"/\",\n      state: {\n        authError: true\n      }\n    }));\n  };\n\n  useEffect(() => {\n    const ids = getStorageData(\"saved_tracks\");\n    setSongIds(ids);\n    userQuery(playlistQuery);\n  }, [userQuery]);\n\n  const playlistQuery = username => {\n    client.query({\n      query: USER_PLAYLISTS_QUERY,\n      variables: {\n        username\n      }\n    }).then(result => {\n      setCurrentPlaylist(result.data.userPlaylists[0]);\n      setUserPlaylists(result.data.userPlaylists);\n    }).catch(err => console.log(\"ERROR\", err));\n  };\n\n  const addToPlaylistQuery = () => {\n    if (currentPlaylist.id) client.query({\n      query: ADD_TO_PLAYLIST_QUERY,\n      variables: {\n        songIds: getStorageData(\"saved_tracks\"),\n        playlist_id: currentPlaylist.id\n      }\n    }).then(result => {\n      setIsSavedPlaylist(result.data.addToPlaylist.snapshot_id);\n      setTimeout(function () {\n        setIsSavedPlaylist(\"\");\n      }, 2000);\n    }).catch(err => console.log(\"ERROR\", err));\n  };\n\n  const removeSong = trackId => {\n    const newSongTracks = savedSongs.filter(item => item.id !== trackId);\n    const newSongIds = songIds.filter(item => item !== trackId);\n    setSongIds(newSongIds);\n    setSavedSongs(newSongTracks);\n    setStorageData(\"saved_tracks\", newSongIds);\n  };\n\n  const handleSelectChange = value => {\n    setCurrentPlaylist(value);\n  };\n\n  const renderSongs = songs => {\n    return songs.map((song, index) => React.createElement(\"div\", {\n      key: song.id,\n      className: \"d-flex justify-content-center align-items-center mb-5 flex-column col-12 col-md-6 col-lg-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(Card, {\n      key: index,\n      image: song.album.images.url,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }), React.createElement(CardBody, {\n      artists: song.artists,\n      preview_url: song.preview_url,\n      name: song.name,\n      style: {\n        name: \"heading__primary-small mb-2 mt-2 text-center\",\n        artist: \"heading__secondary-small mb-3 text-center text-white\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"heading__secondary-small mt-2 text-primary\",\n      style: {\n        cursor: \"pointer\"\n      },\n      onClick: () => removeSong(song.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"Remove this song\")));\n  };\n\n  const getPlaylistId = name => {\n    const playlist = userPlaylists.filter(item => item.name === name);\n    return playlist[0].id;\n  };\n\n  const renderPlaylists = arr => arr.map((item, index) => React.createElement(\"option\", {\n    key: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, item.name));\n\n  const changeModalState = () => {\n    return setModalState(!modalState);\n  };\n\n  const renderNoTracksMessage = () => React.createElement(\"div\", {\n    className: \"heading__primary content-wrapper d-flex justify-content-center text-center px-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, \"You haven't saved any tracks yet.\");\n\n  return songIds ? React.createElement(Query, {\n    query: SAVED_TRACKS_QUERY,\n    variables: {\n      savedTracks: songIds\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, properties => {\n    if (properties.loading) return React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    });\n\n    if (properties.error) {\n      const error = properties.error.graphQLErrors[0].message;\n      return React.createElement(QueryError, {\n        pushHistory: props.history.push,\n        errorMessage: error,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      });\n    } else {\n      if (!savedSongs.length && !getStorageData(\"saved_tracks\").length) return renderNoTracksMessage();\n      !savedSongs.length && setSavedSongs(properties.data.savedTracks);\n      return username && currentPlaylist ? React.createElement(\"div\", {\n        className: \"content-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, isSavedPlaylist ? React.createElement(Alert, {\n        message: \"Selected songs were successfully added to your playlist\",\n        isSuccess: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }) : null, React.createElement(Modal, {\n        show: modalState,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, React.createElement(PlaylistModalBody, {\n        name: currentPlaylist.name,\n        changeModalState: () => changeModalState(),\n        addToPlaylist: () => addToPlaylistQuery(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"d-flex justify-content-center align-items-center mb-3 flex-column\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"heading__primary mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, \"Choose your playlist\"), React.createElement(\"select\", {\n        className: \"select-input\",\n        onChange: e => handleSelectChange({\n          name: e.target.value,\n          id: getPlaylistId(e.target.value)\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, renderPlaylists(userPlaylists)), React.createElement(Button, {\n        type: \"primary\",\n        title: \"Add these songs to \\\"\".concat(currentPlaylist.name, \"\\\"\"),\n        action: () => {\n          changeModalState();\n        },\n        colors: \"bg-primary text-white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, renderSongs(savedSongs))) : React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }, \"Please login\");\n    }\n  }) : renderNoTracksMessage();\n});\nexport default SavedSongs;","map":{"version":3,"sources":["/Users/lukas/Documents/GitHub/spotify-app /client/src/pages/savedSongs/index.tsx"],"names":["React","useEffect","useState","memo","SAVED_TRACKS_QUERY","USER_PLAYLISTS_QUERY","USER_DETAILS_QUERY","ADD_TO_PLAYLIST_QUERY","Button","client","Card","Modal","PlaylistModalBody","CardBody","Alert","Query","Spinner","getStorageData","setStorageData","QueryError","SavedSongs","props","username","setUsername","id","name","currentPlaylist","setCurrentPlaylist","userPlaylists","setUserPlaylists","songIds","setSongIds","savedSongs","setSavedSongs","modalState","setModalState","isSavedPlaylist","setIsSavedPlaylist","userQuery","fn","query","then","data","userDetails","display_name","catch","err","history","push","pathname","state","authError","ids","playlistQuery","variables","result","console","log","addToPlaylistQuery","playlist_id","addToPlaylist","snapshot_id","setTimeout","removeSong","trackId","newSongTracks","filter","item","newSongIds","handleSelectChange","value","renderSongs","songs","map","song","index","album","images","url","artists","preview_url","artist","cursor","getPlaylistId","playlist","renderPlaylists","arr","changeModalState","renderNoTracksMessage","savedTracks","properties","loading","error","graphQLErrors","message","length","e","target"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, memo } from \"react\";\nimport {\n    SAVED_TRACKS_QUERY,\n    USER_PLAYLISTS_QUERY,\n    USER_DETAILS_QUERY,\n    ADD_TO_PLAYLIST_QUERY\n} from \"../../graphqlQueries\";\nimport { Button } from \"../../components/button\";\nimport { client } from \"../../App\";\nimport { Card } from \"./card\";\nimport { Modal } from \"../../components/modal\";\nimport { PlaylistModalBody } from \"./savedModalBody\";\nimport { CardBody } from \"../../components/cardBody\";\nimport { Alert } from \"../../components/alert\";\nimport { Query } from \"react-apollo\";\nimport { Spinner } from \"../../components/spinner\";\nimport { getStorageData, setStorageData } from \"../../utilities/localStorage\";\nimport \"./SavedSongs.css\";\nimport \"../../Shared.css\";\nimport { QueryError } from \"../../components/queryError\";\n\nconst SavedSongs: React.StatelessComponent<{}> = memo((props: any) => {\n    const [username, setUsername] = useState<string>(\"\");\n    const [currentPlaylist, setCurrentPlaylist] = useState<{ id: string, name: string }>({ id: \"\", name: \"\" });\n    const [userPlaylists, setUserPlaylists] = useState([]);\n    const [songIds, setSongIds] = useState([]);\n    const [savedSongs, setSavedSongs] = useState([]);\n    const [modalState, setModalState] = useState<boolean>(false);\n    const [isSavedPlaylist, setIsSavedPlaylist] = useState<string>(\"\");\n\n    const userQuery = (fn: (args: any) => void) => {\n        client\n            .query({\n                query: USER_DETAILS_QUERY\n            })\n            .then(({ data: { userDetails: { display_name } } }) => {\n                fn(display_name);\n                setUsername(display_name);\n            })\n            .catch(err =>\n                props.history.push({\n                    pathname: \"/\",\n                    state: { authError: true }\n                })\n            );\n    };\n\n    useEffect((): void => {\n        const ids = getStorageData(\"saved_tracks\");\n        setSongIds(ids);\n        userQuery(playlistQuery);\n    }, [userQuery]);\n\n    const playlistQuery = (username: string) => {\n        client\n            .query({\n                query: USER_PLAYLISTS_QUERY,\n                variables: { username }\n            })\n            .then(result => {\n                setCurrentPlaylist(result.data.userPlaylists[0]);\n                setUserPlaylists(result.data.userPlaylists);\n            })\n            .catch(err => console.log(\"ERROR\", err));\n    };\n\n    const addToPlaylistQuery = (): void => {\n        if (currentPlaylist.id)\n            client\n                .query({\n                    query: ADD_TO_PLAYLIST_QUERY,\n                    variables: {\n                        songIds: getStorageData(\"saved_tracks\"),\n                        playlist_id: currentPlaylist.id\n                    }\n                })\n                .then(result => {\n                    setIsSavedPlaylist(result.data.addToPlaylist.snapshot_id);\n                    setTimeout(function () {\n                        setIsSavedPlaylist(\"\");\n                    }, 2000);\n                })\n                .catch(err => console.log(\"ERROR\", err));\n    };\n\n    const removeSong = (trackId: string): void => {\n        const newSongTracks = savedSongs.filter(\n            (item: {\n                id: string;\n                album: { images: { url: string } };\n                artists: { name: string }[];\n                preview_url: string;\n                name: string;\n            }) => item.id !== trackId\n        );\n        const newSongIds = songIds.filter((item: string) => item !== trackId);\n        setSongIds(newSongIds);\n        setSavedSongs(newSongTracks);\n        setStorageData(\"saved_tracks\", newSongIds);\n    };\n\n    const handleSelectChange = (value: { name: string; id: string }): void => {\n        setCurrentPlaylist(value);\n    };\n\n    const renderSongs = (\n        songs: {\n            id: string;\n            album: { images: { url: string } };\n            artists: { name: string }[];\n            preview_url: string;\n            name: string;\n        }[]\n    ) => {\n        return songs.map(\n            (\n                song: {\n                    id: string;\n                    album: { images: { url: string } };\n                    artists: { name: string }[];\n                    preview_url: string;\n                    name: string;\n                },\n                index: number\n            ) => (\n                    <div\n                        key={song.id}\n                        className=\"d-flex justify-content-center align-items-center mb-5 flex-column col-12 col-md-6 col-lg-4\"\n                    >\n                        <Card key={index} image={song.album.images.url} />\n                        <CardBody\n                            artists={song.artists}\n                            preview_url={song.preview_url}\n                            name={song.name}\n                            style={{\n                                name: \"heading__primary-small mb-2 mt-2 text-center\",\n                                artist: \"heading__secondary-small mb-3 text-center text-white\"\n                            }}\n                        />\n                        <div\n                            className=\"heading__secondary-small mt-2 text-primary\"\n                            style={{ cursor: \"pointer\" }}\n                            onClick={() => removeSong(song.id)}\n                        >\n                            Remove this song\n                    </div>\n                    </div>\n                )\n        );\n    };\n\n    const getPlaylistId = (name: string): string => {\n        const playlist: { name: string; id: string }[] = userPlaylists.filter(\n            (item: { name: string; id: string }) => item.name === name\n        );\n        return playlist[0].id;\n    };\n\n    const renderPlaylists = (arr: { name: string; id: string }[]) =>\n        arr.map((item, index) => <option key={index}>{item.name}</option>);\n\n    const changeModalState = (): void => {\n        return setModalState(!modalState);\n    };\n\n    const renderNoTracksMessage = () => (\n        <div className=\"heading__primary content-wrapper d-flex justify-content-center text-center px-4\">\n            You haven't saved any tracks yet.\n        </div>\n    );\n\n    return songIds ? (\n        <Query query={SAVED_TRACKS_QUERY} variables={{ savedTracks: songIds }}>\n            {(properties: any) => {\n                if (properties.loading) return <Spinner />;\n                if (properties.error) {\n                    const error = properties.error.graphQLErrors[0].message;\n                    return (\n                        <QueryError pushHistory={props.history.push} errorMessage={error} />\n                    );\n                } else {\n                    if (!savedSongs.length && !getStorageData(\"saved_tracks\").length)\n                        return renderNoTracksMessage();\n\n                    !savedSongs.length && setSavedSongs(properties.data.savedTracks);\n\n                    return username && currentPlaylist ? (\n                        <div className=\"content-wrapper\">\n                            {isSavedPlaylist ? (\n                                <Alert\n                                    message={\n                                        \"Selected songs were successfully added to your playlist\"\n                                    }\n                                    isSuccess={true}\n                                />\n                            ) : null}\n                            <Modal show={modalState}>\n                                <PlaylistModalBody\n                                    name={currentPlaylist.name}\n                                    changeModalState={() => changeModalState()}\n                                    addToPlaylist={() => addToPlaylistQuery()}\n                                />\n                            </Modal>\n                            <div className=\"d-flex justify-content-center align-items-center mb-3 flex-column\">\n                                <div className=\"heading__primary mb-3\">\n                                    Choose your playlist\n                                </div>\n                                <select\n                                    className=\"select-input\"\n                                    onChange={e =>\n                                        handleSelectChange({\n                                            name: e.target.value,\n                                            id: getPlaylistId(e.target.value)\n                                        })\n                                    }\n                                >\n                                    {renderPlaylists(userPlaylists)}\n                                </select>\n                                <Button\n                                    type={\"primary\"}\n                                    title={`Add these songs to \"${currentPlaylist.name}\"`}\n                                    action={() => {\n                                        changeModalState();\n                                    }}\n                                    colors={\"bg-primary text-white\"}\n                                />\n                            </div>\n                            <div className=\"row\">{renderSongs(savedSongs)}</div>\n                        </div>\n                    ) : (\n                            <div>Please login</div>\n                        );\n                }\n            }}\n        </Query>\n    ) : (\n            renderNoTracksMessage()\n        );\n});\n\nexport default SavedSongs;\n"]},"metadata":{},"sourceType":"module"}