{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/lukas/Documents/GitHub/spotify-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/lukas/Documents/GitHub/spotify-app/src/pages/savedSongs/index.tsx\";\n\nfunction _templateObject3() {\n  const data = _taggedTemplateLiteral([\"\\n          {\\n            userDetails {\\n              display_name\\n            }\\n          }\\n        \"]);\n\n  _templateObject3 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n  query userPlaylists($username: String!) {\\n    userPlaylistList(username: $username) {\\n      items {\\n        id\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  query SavedTracks($savedTracks: [String!]!) {\\n    savedTracks(savedTracks: $savedTracks) {\\n      id\\n      name\\n      artists {\\n        name\\n      }\\n      preview_url\\n      album {\\n        images {\\n          url\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Fragment } from \"react\";\nimport gql from \"graphql-tag\";\nimport { client } from \"../../App\";\nimport { Card } from \"./card\";\nimport { CardBody } from \"../../components/cardBody\";\nimport { Query } from \"react-apollo\";\nimport { getStorageData } from \"../../utilities/localStorage\";\nimport \"./SavedSongs.css\";\nconst SAVED_TRACKS_QUERY = gql(_templateObject());\nconst USER_PLAYLISTS_QUERY = gql(_templateObject2());\n\nconst SavedSongs = () => {\n  const songIds = getStorageData(\"saved_tracks\");\n\n  const queryUser = async () => {\n    try {\n      const result = await client.query({\n        query: gql(_templateObject3())\n      });\n      return result.data.userDetails.display_name;\n    } catch (err) {\n      console.log(\"ERROR\", err);\n    }\n  };\n\n  const renderSongs = songs => {\n    return songs.map((song, index) => React.createElement(\"div\", {\n      className: \"d-flex justify-content-center align-items-center flex-column col-12 col-sm-6 col-md-4 p-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(Card, {\n      key: index,\n      image: song.album.images.url,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }), React.createElement(CardBody, {\n      artists: song.artists,\n      preview_url: song.preview_url,\n      name: song.name,\n      style: {\n        name: \"heading__primary-small mb-2 mt-2 text-center\",\n        artist: \"heading__secondary-small mb-4 text-center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    })));\n  };\n\n  const username = queryUser().then(name => name);\n  return songIds ? React.createElement(Query, {\n    query: SAVED_TRACKS_QUERY,\n    variables: {\n      savedTracks: songIds\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, props => {\n    if (props.loading) return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Loading...\");\n    if (props.error) console.log(\"error\", props.error);else {\n      console.log(\"data\", props.data);\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, username ? React.createElement(Query, {\n        query: USER_PLAYLISTS_QUERY,\n        variables: {\n          username\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, props => {\n        if (props.loading) return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }, \"Loading...\");\n        if (props.error) console.log(\"error\", props.error);else {\n          console.log(\"THE DATA\", props.data.userDetails.display_name);\n          return React.createElement(\"div\", {\n            className: \"d-flex justify-content-center m-5\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 100\n            },\n            __self: this\n          }, React.createElement(\"select\", {\n            className: \"select-input\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 101\n            },\n            __self: this\n          }, React.createElement(\"option\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 102\n            },\n            __self: this\n          }, props.data.userDetails.display_name)));\n        }\n      }) : null, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, renderSongs(props.data.savedTracks)));\n    }\n  }) : null;\n};\n\nexport default SavedSongs;","map":{"version":3,"sources":["/Users/lukas/Documents/GitHub/spotify-app/src/pages/savedSongs/index.tsx"],"names":["React","Fragment","gql","client","Card","CardBody","Query","getStorageData","SAVED_TRACKS_QUERY","USER_PLAYLISTS_QUERY","SavedSongs","songIds","queryUser","result","query","data","userDetails","display_name","err","console","log","renderSongs","songs","map","song","index","album","images","url","artists","preview_url","name","artist","username","then","savedTracks","props","loading","error"],"mappings":"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","sourcesContent":["import React, { useEffect, Fragment } from \"react\";\nimport gql from \"graphql-tag\";\nimport { Button } from \"../../components/button\";\nimport { client } from \"../../App\";\nimport { Card } from \"./card\";\nimport { CardBody } from \"../../components/cardBody\";\nimport { Query } from \"react-apollo\";\nimport { getStorageData } from \"../../utilities/localStorage\";\nimport \"./SavedSongs.css\";\n\nconst SAVED_TRACKS_QUERY = gql`\n  query SavedTracks($savedTracks: [String!]!) {\n    savedTracks(savedTracks: $savedTracks) {\n      id\n      name\n      artists {\n        name\n      }\n      preview_url\n      album {\n        images {\n          url\n        }\n      }\n    }\n  }\n`;\n\nconst USER_PLAYLISTS_QUERY = gql`\n  query userPlaylists($username: String!) {\n    userPlaylistList(username: $username) {\n      items {\n        id\n      }\n    }\n  }\n`;\n\nconst SavedSongs = () => {\n  const songIds = getStorageData(\"saved_tracks\");\n\n  const queryUser = async () => {\n    try {\n      const result = await client.query({\n        query: gql`\n          {\n            userDetails {\n              display_name\n            }\n          }\n        `\n      });\n\n      return result.data.userDetails.display_name;\n    } catch (err) {\n      console.log(\"ERROR\", err);\n    }\n  };\n\n  const renderSongs = (songs: any) => {\n    return songs.map((song: any, index: number) => (\n      <div className=\"d-flex justify-content-center align-items-center flex-column col-12 col-sm-6 col-md-4 p-3\">\n        <Card key={index} image={song.album.images.url} />\n        <CardBody\n          artists={song.artists}\n          preview_url={song.preview_url}\n          name={song.name}\n          style={{\n            name: \"heading__primary-small mb-2 mt-2 text-center\",\n            artist: \"heading__secondary-small mb-4 text-center\"\n          }}\n        />\n      </div>\n    ));\n  };\n\n  const username = queryUser().then(name => name)\n\n\n  return songIds ? (\n    <Query query={SAVED_TRACKS_QUERY} variables={{ savedTracks: songIds }}>\n      {(props: any) => {\n        if (props.loading) return <div>Loading...</div>;\n        if (props.error) console.log(\"error\", props.error);\n        else {\n          console.log(\"data\", props.data);\n          return (\n            <Fragment>\n              {username ? (\n                <Query query={USER_PLAYLISTS_QUERY} variables={{ username }}>\n                  {(props: any) => {\n                    if (props.loading) return <div>Loading...</div>;\n                    if (props.error) console.log(\"error\", props.error);\n                    else {\n                      console.log(\n                        \"THE DATA\",\n                        props.data.userDetails.display_name\n                      );\n                      return (\n                        <div className=\"d-flex justify-content-center m-5\">\n                          <select className=\"select-input\">\n                            <option>\n                              {props.data.userDetails.display_name}\n                            </option>\n                          </select>\n                        </div>\n                      );\n                    }\n                  }}\n                </Query>\n              ) : null}\n\n              <div className=\"row\">{renderSongs(props.data.savedTracks)}</div>\n            </Fragment>\n          );\n        }\n      }}\n    </Query>\n  ) : null;\n};\n\nexport default SavedSongs;\n"]},"metadata":{},"sourceType":"module"}