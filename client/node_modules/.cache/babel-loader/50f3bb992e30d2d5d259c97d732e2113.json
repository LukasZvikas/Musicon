{"ast":null,"code":"import _slicedToArray from \"/Users/lukas/Documents/GitHub/spotify-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/lukas/Documents/GitHub/spotify-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/lukas/Documents/GitHub/spotify-app/src/pages/dashboard/index.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  query TracksQuery($selectedGenres: [String!]!) {\\n    suggestedTracks(selectedGenres: $selectedGenres) {\\n      id\\n      name\\n      artists {\\n        name\\n      }\\n      preview_url\\n      album {\\n        images {\\n          url\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, Fragment } from \"react\";\nimport { updateStorageData, getStorageData } from \"../../utilities/localStorage\";\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport { SwipeCard } from \"./swipeCard\";\nimport { CardBody } from \"../../components/cardBody\";\nimport { Button } from \"../../components/button\";\nimport { Alert } from \"../../components/alert\";\nimport \"../../Shared.css\";\nimport \"./Dashboard.css\";\nconst TRACKS_QUERY = gql(_templateObject());\n\nconst Dashboard = props => {\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        currentIndex = _useState2[0],\n        updateIndex = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isSongSaved = _useState4[0],\n        setIsSongSaved = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        isError = _useState6[0],\n        setIsError = _useState6[1];\n\n  const nextSong = () => {\n    updateIndex(currentIndex + 1);\n    document.querySelector(\".card__audio-bar\").load();\n  };\n\n  const saveSong = id => {\n    const savedTracks = getStorageData(\"saved_track\");\n\n    if (savedTracks.includes(id)) {\n      setIsError(true);\n      setTimeout(function () {\n        setIsSongSaved(false);\n      }, 2000);\n    }\n\n    const result = updateStorageData(\"saved_tracks\", id);\n\n    if (result) {\n      setIsSongSaved(true);\n      setTimeout(function () {\n        setIsSongSaved(false);\n      }, 2000);\n    }\n  };\n\n  const previousSong = () => {\n    updateIndex(currentIndex - 1);\n    document.querySelector(\".card__audio-bar\").load();\n  };\n\n  return React.createElement(\"div\", {\n    className: \"d-flex justify-content-center align-items-center h-100 flex-column\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, isSongSaved ? React.createElement(Alert, {\n    message: \"Song was successfuly saved!\",\n    isSuccess: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }) : null, isError ? React.createElement(Alert, {\n    message: \"You already saved this song!\",\n    isSuccess: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }) : null, React.createElement(Query, {\n    query: TRACKS_QUERY,\n    variables: {\n      selectedGenres: props.location.state\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, ({\n    loading,\n    error,\n    data\n  }) => {\n    if (loading) return React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"LOADING...\");\n    if (error) console.log(\"error\", error);else {\n      console.log(\"DATA\", data);\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(SwipeCard, {\n        nextSong: () => nextSong(),\n        previousSong: () => previousSong(),\n        image: data.suggestedTracks[currentIndex].album.images.url,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }), React.createElement(CardBody, {\n        artists: data.suggestedTracks[currentIndex].artists,\n        name: data.suggestedTracks[currentIndex].name,\n        preview_url: data.suggestedTracks[currentIndex].preview_url,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }), React.createElement(Button, {\n        type: \"primary\",\n        title: \"Add to playlist\",\n        action: () => saveSong(data.suggestedTracks[currentIndex].id),\n        colors: {\n          backgroundColor: \"rgb(255, 78, 80)\",\n          color: \"#fff\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }));\n    }\n  }));\n};\n\nexport default Dashboard;","map":{"version":3,"sources":["/Users/lukas/Documents/GitHub/spotify-app/src/pages/dashboard/index.js"],"names":["React","useState","Fragment","updateStorageData","getStorageData","gql","Query","SwipeCard","CardBody","Button","Alert","TRACKS_QUERY","Dashboard","props","currentIndex","updateIndex","isSongSaved","setIsSongSaved","isError","setIsError","nextSong","document","querySelector","load","saveSong","id","savedTracks","includes","setTimeout","result","previousSong","selectedGenres","location","state","loading","error","data","console","log","suggestedTracks","album","images","url","artists","name","preview_url","backgroundColor","color"],"mappings":"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","sourcesContent":["import React, { useState, Fragment } from \"react\";\nimport {\n  updateStorageData,\n  getStorageData\n} from \"../../utilities/localStorage\";\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport { SwipeCard } from \"./swipeCard\";\nimport { CardBody } from \"../../components/cardBody\";\nimport { Button } from \"../../components/button\";\nimport { Alert } from \"../../components/alert\";\nimport \"../../Shared.css\";\nimport \"./Dashboard.css\";\n\nconst TRACKS_QUERY = gql`\n  query TracksQuery($selectedGenres: [String!]!) {\n    suggestedTracks(selectedGenres: $selectedGenres) {\n      id\n      name\n      artists {\n        name\n      }\n      preview_url\n      album {\n        images {\n          url\n        }\n      }\n    }\n  }\n`;\n\nconst Dashboard = props => {\n  const [currentIndex, updateIndex] = useState(0);\n  const [isSongSaved, setIsSongSaved] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  const nextSong = () => {\n    updateIndex(currentIndex + 1);\n    document.querySelector(\".card__audio-bar\").load();\n  };\n\n  const saveSong = id => {\n    const savedTracks = getStorageData(\"saved_track\");\n\n    if (savedTracks.includes(id)) {\n      setIsError(true);\n      setTimeout(function() {\n        setIsSongSaved(false);\n      }, 2000);\n    }\n\n    const result = updateStorageData(\"saved_tracks\", id);\n\n    if (result) {\n      setIsSongSaved(true);\n      setTimeout(function() {\n        setIsSongSaved(false);\n      }, 2000);\n    }\n  };\n\n  const previousSong = () => {\n    updateIndex(currentIndex - 1);\n    document.querySelector(\".card__audio-bar\").load();\n  };\n\n  return (\n    <div className=\"d-flex justify-content-center align-items-center h-100 flex-column\">\n      {isSongSaved ? (\n        <Alert message={\"Song was successfuly saved!\"} isSuccess={true} />\n      ) : null}\n      {isError ? (\n        <Alert message={\"You already saved this song!\"} isSuccess={false} />\n      ) : null}\n      <Query\n        query={TRACKS_QUERY}\n        variables={{ selectedGenres: props.location.state }}\n      >\n        {({ loading, error, data }) => {\n          if (loading) return <h4>LOADING...</h4>;\n          if (error) console.log(\"error\", error);\n          else {\n            console.log(\"DATA\", data);\n            return (\n              <Fragment>\n                <SwipeCard\n                  nextSong={() => nextSong()}\n                  previousSong={() => previousSong()}\n                  image={data.suggestedTracks[currentIndex].album.images.url}\n                />\n\n                <CardBody\n                  artists={data.suggestedTracks[currentIndex].artists}\n                  name={data.suggestedTracks[currentIndex].name}\n                  preview_url={data.suggestedTracks[currentIndex].preview_url}\n                />\n                <Button\n                  type={\"primary\"}\n                  title={\"Add to playlist\"}\n                  action={() => saveSong(data.suggestedTracks[currentIndex].id)}\n                  colors={{\n                    backgroundColor: \"rgb(255, 78, 80)\",\n                    color: \"#fff\"\n                  }}\n                />\n              </Fragment>\n            );\n          }\n        }}\n      </Query>\n    </div>\n  );\n};\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}