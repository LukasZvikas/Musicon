{"ast":null,"code":"import _objectSpread from \"/Users/lukas/Documents/GitHub/spotify-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/lukas/Documents/GitHub/spotify-app/src/App.tsx\";\nimport React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { ApolloClient } from \"apollo-client\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { setContext } from \"apollo-link-context\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport Header from \"./components/header\";\nimport Quiz from \"./pages/quiz\";\nimport Explore from \"./pages/explore\";\nimport SavedSongs from \"./pages/savedSongs\";\nimport { getStorageData } from \"./utilities/localStorage\";\nimport \"./App.css\"; // uri: \"http://localhost:5000/graphql\",\n// headers: authLink\n\nconst httpLink = createHttpLink({\n  uri: \"http://localhost:5000/graphql\"\n});\nconst authLink = setContext((_, {\n  headers\n}) => {\n  // get the authentication token from local storage if it exists\n  const token = getStorageData(\"token\"); // return the headers to the context so httpLink can read them\n\n  return {\n    headers: _objectSpread({}, headers, {\n      token\n    })\n  };\n});\nexport const client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n});\n\nconst App = () => {\n  return React.createElement(ApolloProvider, {\n    client: client,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(BrowserRouter, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }), React.createElement(Switch, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(Route, {\n    path: \"/\",\n    exact: true,\n    component: Quiz,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }), React.createElement(Route, {\n    path: \"/explore\",\n    component: Explore,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }), React.createElement(Route, {\n    path: \"/saved\",\n    component: SavedSongs,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }), React.createElement(Route, {\n    path: \"/*\",\n    component: Quiz,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }))));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/lukas/Documents/GitHub/spotify-app/src/App.tsx"],"names":["React","BrowserRouter","Route","Switch","ApolloClient","ApolloProvider","setContext","createHttpLink","InMemoryCache","Header","Quiz","Explore","SavedSongs","getStorageData","httpLink","uri","authLink","_","headers","token","client","link","concat","cache","App"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,KAAxB,EAA+BC,MAA/B,QAA6C,kBAA7C;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,OAAP,MAAoB,iBAApB;AACA,OAAOC,UAAP,MAAuB,oBAAvB;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,OAAO,WAAP,C,CAEA;AACA;;AAEA,MAAMC,QAAQ,GAAGP,cAAc,CAAC;AAC9BQ,EAAAA,GAAG,EAAE;AADyB,CAAD,CAA/B;AAIA,MAAMC,QAAQ,GAAGV,UAAU,CAAC,CAACW,CAAD,EAAI;AAAEC,EAAAA;AAAF,CAAJ,KAAoB;AAC9C;AACA,QAAMC,KAAK,GAAGN,cAAc,CAAC,OAAD,CAA5B,CAF8C,CAG9C;;AACA,SAAO;AACLK,IAAAA,OAAO,oBACFA,OADE;AAELC,MAAAA;AAFK;AADF,GAAP;AAMD,CAV0B,CAA3B;AAYA,OAAO,MAAMC,MAAM,GAAG,IAAIhB,YAAJ,CAAiB;AACrCiB,EAAAA,IAAI,EAAEL,QAAQ,CAACM,MAAT,CAAgBR,QAAhB,CAD+B;AAErCS,EAAAA,KAAK,EAAE,IAAIf,aAAJ;AAF8B,CAAjB,CAAf;;AAKP,MAAMgB,GAAG,GAAG,MAAM;AAChB,SACE,oBAAC,cAAD;AAAgB,IAAA,MAAM,EAAEJ,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,GAAZ;AAAgB,IAAA,KAAK,MAArB;AAAsB,IAAA,SAAS,EAAEV,IAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,UAAZ;AAAuB,IAAA,SAAS,EAAEC,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAqB,IAAA,SAAS,EAAEC,UAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EAIE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,IAAZ;AAAiB,IAAA,SAAS,EAAEF,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CAFF,CADF,CADF;AAaD,CAdD;;AAgBA,eAAec,GAAf","sourcesContent":["import React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { ApolloClient } from \"apollo-client\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { setContext } from \"apollo-link-context\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport Header from \"./components/header\";\nimport Quiz from \"./pages/quiz\";\nimport Explore from \"./pages/explore\";\nimport SavedSongs from \"./pages/savedSongs\";\nimport { getStorageData } from \"./utilities/localStorage\";\nimport \"./App.css\";\n\n// uri: \"http://localhost:5000/graphql\",\n// headers: authLink\n\nconst httpLink = createHttpLink({\n  uri: \"http://localhost:5000/graphql\"\n});\n\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = getStorageData(\"token\");\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      token\n    }\n  };\n});\n\nexport const client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n});\n\nconst App = () => {\n  return (\n    <ApolloProvider client={client}>\n      <BrowserRouter>\n        <Header />\n        <Switch>\n          <Route path=\"/\" exact component={Quiz} />\n          <Route path=\"/explore\" component={Explore} />\n          <Route path=\"/saved\" component={SavedSongs} />\n          <Route path=\"/*\" component={Quiz} />\n        </Switch>\n      </BrowserRouter>\n    </ApolloProvider>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}