{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/lukas/Documents/GitHub/spotify-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/lukas/Documents/GitHub/spotify-app/src/pages/savedSongs/index.tsx\";\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n          {\\n            userDetails {\\n              display_name\\n            }\\n          }\\n        \"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  query SavedTracks($savedTracks: [String!]!) {\\n    savedTracks(savedTracks: $savedTracks) {\\n      id\\n      name\\n      artists {\\n        name\\n      }\\n      preview_url\\n      album {\\n        images {\\n          url\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport gql from \"graphql-tag\";\nimport { client } from \"../../App\";\nimport { Card } from \"./card\";\nimport { CardBody } from \"../../components/cardBody\";\nimport { Query } from \"react-apollo\";\nimport { getStorageData } from \"../../utilities/localStorage\";\nimport \"./SavedSongs.css\";\nconst SAVED_TRACKS_QUERY = gql(_templateObject());\n\nconst SavedSongs = () => {\n  const songIds = getStorageData(\"saved_tracks\");\n\n  const queryUser = async () => {\n    try {\n      const result = await client.query({\n        query: gql(_templateObject2())\n      });\n      const username = result.data.userDetails.display_name;\n\n      try {\n        const storedUsername = localStorage.getItem(\"username\");\n        if (storedUsername) localStorage.setItem(\"username\", username);\n      } catch (err) {\n        console.log(\"ERROR\", err);\n      }\n    } catch (err) {\n      console.log(\"ERROR\", err);\n    }\n  };\n\n  queryUser();\n\n  const renderSongs = songs => {\n    return songs.map((song, index) => React.createElement(\"div\", {\n      className: \"d-flex justify-content-center align-items-center flex-column col-12 col-sm-6 col-md-4 p-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(Card, {\n      key: index,\n      image: song.album.images.url,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }), React.createElement(CardBody, {\n      artists: song.artists,\n      preview_url: song.preview_url,\n      name: song.name,\n      style: {\n        name: \"heading__primary-small mb-2 mt-2 text-center\",\n        artist: \"heading__secondary-small mb-4 text-center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    })));\n  };\n\n  return songIds ? React.createElement(Query, {\n    query: SAVED_TRACKS_QUERY,\n    variables: {\n      savedTracks: songIds\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, props => {\n    if (props.loading) return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Loading...\");\n    if (props.error) console.log(\"error\", props.error);else {\n      console.log(\"data\", props.data);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }); // <Fragment>\n      //   <Query query={USER_DETAILS_QUERY}>\n      //     {(props: any) => {\n      //       if (props.loading) return <div>Loading...</div>;\n      //       if (props.error) console.log(\"error\", props.error);\n      //       else {\n      //         console.log(\n      //           \"THE DATA\",\n      //           props.data.userDetails.display_name\n      //         );\n      //         return (\n      //           <div className=\"d-flex justify-content-center m-5\">\n      //             <select className=\"select-input\">\n      //               <option>{props.data.userDetails.display_name}</option>\n      //             </select>\n      //           </div>\n      //         );\n      //       }\n      //     }}\n      //   </Query>\n      //   <div className=\"row\">{renderSongs(props.data.savedTracks)}</div>\n      // </Fragment>\n    }\n  }) : null;\n};\n\nexport default SavedSongs;","map":{"version":3,"sources":["/Users/lukas/Documents/GitHub/spotify-app/src/pages/savedSongs/index.tsx"],"names":["React","gql","client","Card","CardBody","Query","getStorageData","SAVED_TRACKS_QUERY","SavedSongs","songIds","queryUser","result","query","username","data","userDetails","display_name","storedUsername","localStorage","getItem","setItem","err","console","log","renderSongs","songs","map","song","index","album","images","url","artists","preview_url","name","artist","savedTracks","props","loading","error"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAA2C,OAA3C;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,SAAQC,MAAR,QAAqB,WAArB;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,QAAT,QAAyB,2BAAzB;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,SAASC,cAAT,QAA+B,8BAA/B;AACA,OAAO,kBAAP;AAEA,MAAMC,kBAAkB,GAAGN,GAAH,mBAAxB;;AAkBA,MAAMO,UAAU,GAAG,MAAM;AACvB,QAAMC,OAAO,GAAGH,cAAc,CAAC,cAAD,CAA9B;;AAEA,QAAMI,SAAS,GAAG,YAAY;AAC5B,QAAI;AACF,YAAMC,MAAM,GAAG,MAAMT,MAAM,CAACU,KAAP,CAAa;AAChCA,QAAAA,KAAK,EAAEX,GAAF;AAD2B,OAAb,CAArB;AAUA,YAAMY,QAAQ,GAAGF,MAAM,CAACG,IAAP,CAAYC,WAAZ,CAAwBC,YAAzC;;AACA,UAAI;AACF,cAAMC,cAAc,GAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAvB;AACA,YAAIF,cAAJ,EAAoBC,YAAY,CAACE,OAAb,CAAqB,UAArB,EAAiCP,QAAjC;AACrB,OAHD,CAGE,OAAOQ,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,GAArB;AACD;AAEF,KAnBD,CAmBE,OAAOA,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,GAArB;AACD;AACF,GAvBD;;AAyBAX,EAAAA,SAAS;;AAET,QAAMc,WAAW,GAAIC,KAAD,IAAgB;AAClC,WAAOA,KAAK,CAACC,GAAN,CAAU,CAACC,IAAD,EAAYC,KAAZ,KACf;AAAK,MAAA,SAAS,EAAC,2FAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAEA,KAAX;AAAkB,MAAA,KAAK,EAAED,IAAI,CAACE,KAAL,CAAWC,MAAX,CAAkBC,GAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,QAAD;AACE,MAAA,OAAO,EAAEJ,IAAI,CAACK,OADhB;AAEE,MAAA,WAAW,EAAEL,IAAI,CAACM,WAFpB;AAGE,MAAA,IAAI,EAAEN,IAAI,CAACO,IAHb;AAIE,MAAA,KAAK,EAAE;AACLA,QAAAA,IAAI,EAAE,8CADD;AAELC,QAAAA,MAAM,EAAE;AAFH,OAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADK,CAAP;AAcD,GAfD;;AAgBA,SAAO1B,OAAO,GACZ,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAEF,kBAAd;AAAkC,IAAA,SAAS,EAAE;AAAE6B,MAAAA,WAAW,EAAE3B;AAAf,KAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI4B,KAAD,IAAgB;AACf,QAAIA,KAAK,CAACC,OAAV,EAAmB,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACnB,QAAID,KAAK,CAACE,KAAV,EAAiBjB,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBc,KAAK,CAACE,KAA3B,EAAjB,KACK;AACHjB,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBc,KAAK,CAACvB,IAA1B;AACA,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP,CAFG,CAGH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AACF,GA9BH,CADY,GAiCV,IAjCJ;AAkCD,CAhFD;;AAoFA,eAAeN,UAAf","sourcesContent":["import React, { useEffect, Fragment } from \"react\";\nimport gql from \"graphql-tag\";\nimport { Button } from \"../../components/button\";\nimport {client} from \"../../App\";\nimport { Card } from \"./card\";\nimport { CardBody } from \"../../components/cardBody\";\nimport { Query } from \"react-apollo\";\nimport { getStorageData } from \"../../utilities/localStorage\";\nimport \"./SavedSongs.css\";\n\nconst SAVED_TRACKS_QUERY = gql`\n  query SavedTracks($savedTracks: [String!]!) {\n    savedTracks(savedTracks: $savedTracks) {\n      id\n      name\n      artists {\n        name\n      }\n      preview_url\n      album {\n        images {\n          url\n        }\n      }\n    }\n  }\n`;\n\nconst SavedSongs = () => {\n  const songIds = getStorageData(\"saved_tracks\");\n\n  const queryUser = async () => {\n    try {\n      const result = await client.query({\n        query: gql`\n          {\n            userDetails {\n              display_name\n            }\n          }\n        `\n      });\n\n      const username = result.data.userDetails.display_name;\n      try {\n        const storedUsername = localStorage.getItem(\"username\");\n        if (storedUsername) localStorage.setItem(\"username\", username);\n      } catch (err) {\n        console.log(\"ERROR\", err);\n      }\n   \n    } catch (err) {\n      console.log(\"ERROR\", err);\n    }\n  };\n\n  queryUser();\n\n  const renderSongs = (songs: any) => {\n    return songs.map((song: any, index: number) => (\n      <div className=\"d-flex justify-content-center align-items-center flex-column col-12 col-sm-6 col-md-4 p-3\">\n        <Card key={index} image={song.album.images.url} />\n        <CardBody\n          artists={song.artists}\n          preview_url={song.preview_url}\n          name={song.name}\n          style={{\n            name: \"heading__primary-small mb-2 mt-2 text-center\",\n            artist: \"heading__secondary-small mb-4 text-center\"\n          }}\n        />\n      </div>\n    ));\n  };\n  return songIds ? (\n    <Query query={SAVED_TRACKS_QUERY} variables={{ savedTracks: songIds }}>\n      {(props: any) => {\n        if (props.loading) return <div>Loading...</div>;\n        if (props.error) console.log(\"error\", props.error);\n        else {\n          console.log(\"data\", props.data);\n          return <div />;\n          // <Fragment>\n          //   <Query query={USER_DETAILS_QUERY}>\n          //     {(props: any) => {\n          //       if (props.loading) return <div>Loading...</div>;\n          //       if (props.error) console.log(\"error\", props.error);\n          //       else {\n          //         console.log(\n          //           \"THE DATA\",\n          //           props.data.userDetails.display_name\n          //         );\n          //         return (\n          //           <div className=\"d-flex justify-content-center m-5\">\n          //             <select className=\"select-input\">\n          //               <option>{props.data.userDetails.display_name}</option>\n          //             </select>\n          //           </div>\n          //         );\n          //       }\n          //     }}\n          //   </Query>\n          //   <div className=\"row\">{renderSongs(props.data.savedTracks)}</div>\n          // </Fragment>\n        }\n      }}\n    </Query>\n  ) : null;\n};\n\n\n\nexport default SavedSongs;\n"]},"metadata":{},"sourceType":"module"}