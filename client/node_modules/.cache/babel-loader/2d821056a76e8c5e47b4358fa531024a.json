{"ast":null,"code":"import _slicedToArray from \"/Users/lukas/Documents/GitHub/spotify-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/lukas/Documents/GitHub/spotify-app/src/pages/explore/index.tsx\";\nimport React, { useState } from \"react\";\nimport { updateStorageData, getStorageData } from \"../../utilities/localStorage\";\nimport { GET_TRACKS_QUERY } from \"../../graphqlQueries\";\nimport { UNAUTHORIZED } from \"../../utilities/errorTypes\";\nimport { Query } from \"react-apollo\";\nimport { SwipeCard } from \"./swipeCard\";\nimport { CardBody } from \"../../components/cardBody\";\nimport { Button } from \"../../components/button\";\nimport { Alert } from \"../../components/alert\";\nimport \"../../Shared.css\";\nimport \"./Dashboard.css\";\n\nconst Dashboard = props => {\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        currentIndex = _useState2[0],\n        updateIndex = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isSongSaved = _useState4[0],\n        setIsSongSaved = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        isError = _useState6[0],\n        setIsError = _useState6[1];\n\n  const nextSong = () => {\n    updateIndex(currentIndex + 1);\n    const audioBar = document.querySelector(\".card__audio-bar\");\n    if (audioBar) audioBar.load();\n  };\n\n  const previousSong = () => {\n    updateIndex(currentIndex - 1);\n    const audioBar = document.querySelector(\".card__audio-bar\");\n    if (audioBar) audioBar.load();\n  };\n\n  const saveSong = id => {\n    const savedTracks = getStorageData(\"saved_tracks\");\n\n    if (savedTracks && savedTracks.includes(id)) {\n      setIsError(true);\n      setTimeout(function () {\n        setIsError(false);\n      }, 2000);\n      return;\n    }\n\n    const result = updateStorageData(\"saved_tracks\", id);\n\n    if (result) {\n      setIsSongSaved(true);\n      setTimeout(function () {\n        setIsSongSaved(false);\n      }, 2000);\n    }\n  };\n\n  const displayGenres = () => {\n    const genres = getStorageData(\"selected_genres\");\n    return genres.reduce((acc, value, index, arr) => {\n      if (index === arr.length - 1) return acc.concat(value);\n      return acc.concat(\"\".concat(value, \", \"));\n    }, \"\");\n  };\n\n  return React.createElement(\"div\", {\n    className: \"d-flex justify-content-center align-items-center h-100 content-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, isSongSaved ? React.createElement(Alert, {\n    message: \"Song was successfuly saved!\",\n    isSuccess: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }) : null, isError ? React.createElement(Alert, {\n    message: \"You already saved this song!\",\n    isSuccess: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }) : null, React.createElement(Query, {\n    query: GET_TRACKS_QUERY,\n    variables: {\n      selectedGenres: getStorageData(\"selected_genres\")\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, properties => {\n    if (properties.loading) return React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"LOADING...\");\n\n    if (properties.error) {\n      switch (properties.error) {\n        case UNAUTHORIZED:\n          props.history.push({\n            pathname: \"/\",\n            state: {\n              authError: true\n            }\n          });\n          break;\n      }\n\n      props.history.push({\n        pathname: \"/\",\n        state: {\n          authError: true\n        }\n      });\n      return null;\n    } else {\n      return React.createElement(\"div\", {\n        className: \"content-wrapper d-flex flex-column align-items-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"heading__secondary mb-3 text-primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"text-white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \"Current Genres:\"), \" \", displayGenres()), React.createElement(SwipeCard, {\n        nextSong: () => nextSong(),\n        previousSong: () => previousSong(),\n        image: properties.data.suggestedTracks[currentIndex].album.images.url,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }), React.createElement(CardBody, {\n        artists: properties.data.suggestedTracks[currentIndex].artists,\n        name: properties.data.suggestedTracks[currentIndex].name,\n        preview_url: properties.data.suggestedTracks[currentIndex].preview_url,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }), React.createElement(Button, {\n        type: \"primary\",\n        title: \"Add to playlist\",\n        action: () => saveSong(properties.data.suggestedTracks[currentIndex].id),\n        colors: \"bg-primary text-white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }));\n    }\n  }));\n};\n\nexport default Dashboard;","map":{"version":3,"sources":["/Users/lukas/Documents/GitHub/spotify-app/src/pages/explore/index.tsx"],"names":["React","useState","updateStorageData","getStorageData","GET_TRACKS_QUERY","UNAUTHORIZED","Query","SwipeCard","CardBody","Button","Alert","Dashboard","props","currentIndex","updateIndex","isSongSaved","setIsSongSaved","isError","setIsError","nextSong","audioBar","document","querySelector","load","previousSong","saveSong","id","savedTracks","includes","setTimeout","result","displayGenres","genres","reduce","acc","value","index","arr","length","concat","selectedGenres","properties","loading","error","history","push","pathname","state","authError","data","suggestedTracks","album","images","url","artists","name","preview_url"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SACEC,iBADF,EAEEC,cAFF,QAGO,8BAHP;AAIA,SAASC,gBAAT,QAAiC,sBAAjC;AACA,SAASC,YAAT,QAA6B,4BAA7B;AAEA,SAASC,KAAT,QAAsB,cAAtB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,QAAT,QAAyB,2BAAzB;AACA,SAASC,MAAT,QAAuB,yBAAvB;AACA,SAASC,KAAT,QAAsB,wBAAtB;AACA,OAAO,kBAAP;AACA,OAAO,iBAAP;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAgB;AAAA,oBACIX,QAAQ,CAAC,CAAD,CADZ;AAAA;AAAA,QACzBY,YADyB;AAAA,QACXC,WADW;;AAAA,qBAEMb,QAAQ,CAAC,KAAD,CAFd;AAAA;AAAA,QAEzBc,WAFyB;AAAA,QAEZC,cAFY;;AAAA,qBAGFf,QAAQ,CAAC,KAAD,CAHN;AAAA;AAAA,QAGzBgB,OAHyB;AAAA,QAGhBC,UAHgB;;AAKhC,QAAMC,QAAQ,GAAG,MAAM;AACrBL,IAAAA,WAAW,CAACD,YAAY,GAAG,CAAhB,CAAX;AACA,UAAMO,QAAQ,GAAGC,QAAQ,CAACC,aAAT,CACf,kBADe,CAAjB;AAGA,QAAIF,QAAJ,EAAcA,QAAQ,CAACG,IAAT;AACf,GAND;;AAQA,QAAMC,YAAY,GAAG,MAAM;AACzBV,IAAAA,WAAW,CAACD,YAAY,GAAG,CAAhB,CAAX;AACA,UAAMO,QAAQ,GAAGC,QAAQ,CAACC,aAAT,CACf,kBADe,CAAjB;AAGA,QAAIF,QAAJ,EAAcA,QAAQ,CAACG,IAAT;AACf,GAND;;AAQA,QAAME,QAAQ,GAAIC,EAAD,IAAgB;AAC/B,UAAMC,WAAW,GAAGxB,cAAc,CAAC,cAAD,CAAlC;;AAEA,QAAIwB,WAAW,IAAIA,WAAW,CAACC,QAAZ,CAAqBF,EAArB,CAAnB,EAA6C;AAC3CR,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAW,MAAAA,UAAU,CAAC,YAAW;AACpBX,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD,OAFS,EAEP,IAFO,CAAV;AAGA;AACD;;AAED,UAAMY,MAAM,GAAG5B,iBAAiB,CAAC,cAAD,EAAiBwB,EAAjB,CAAhC;;AAEA,QAAII,MAAJ,EAAY;AACVd,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAa,MAAAA,UAAU,CAAC,YAAW;AACpBb,QAAAA,cAAc,CAAC,KAAD,CAAd;AACD,OAFS,EAEP,IAFO,CAAV;AAGD;AACF,GAnBD;;AAqBA,QAAMe,aAAa,GAAG,MAAM;AAC1B,UAAMC,MAAM,GAAG7B,cAAc,CAAC,iBAAD,CAA7B;AAEA,WAAO6B,MAAM,CAACC,MAAP,CACL,CAACC,GAAD,EAAgBC,KAAhB,EAA+BC,KAA/B,EAA8CC,GAA9C,KAAgE;AAC9D,UAAID,KAAK,KAAKC,GAAG,CAACC,MAAJ,GAAa,CAA3B,EAA8B,OAAOJ,GAAG,CAACK,MAAJ,CAAWJ,KAAX,CAAP;AAC9B,aAAOD,GAAG,CAACK,MAAJ,WAAcJ,KAAd,QAAP;AACD,KAJI,EAKL,EALK,CAAP;AAOD,GAVD;;AAYA,SACE;AAAK,IAAA,SAAS,EAAC,wEAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGpB,WAAW,GACV,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAE,6BAAhB;AAA+C,IAAA,SAAS,EAAE,IAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADU,GAER,IAHN,EAIGE,OAAO,GACN,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAE,8BAAhB;AAAgD,IAAA,SAAS,EAAE,KAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADM,GAEJ,IANN,EAOE,oBAAC,KAAD;AACE,IAAA,KAAK,EAAEb,gBADT;AAEE,IAAA,SAAS,EAAE;AAAEoC,MAAAA,cAAc,EAAErC,cAAc,CAAC,iBAAD;AAAhC,KAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIIsC,UAAD,IAAqB;AACpB,QAAIA,UAAU,CAACC,OAAf,EAAwB,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;;AACxB,QAAID,UAAU,CAACE,KAAf,EAAsB;AACpB,cAAQF,UAAU,CAACE,KAAnB;AACE,aAAKtC,YAAL;AACEO,UAAAA,KAAK,CAACgC,OAAN,CAAcC,IAAd,CAAmB;AACjBC,YAAAA,QAAQ,EAAE,GADO;AAEjBC,YAAAA,KAAK,EAAE;AAAEC,cAAAA,SAAS,EAAE;AAAb;AAFU,WAAnB;AAIA;AANJ;;AAQApC,MAAAA,KAAK,CAACgC,OAAN,CAAcC,IAAd,CAAmB;AAAEC,QAAAA,QAAQ,EAAE,GAAZ;AAAiBC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb;AAAxB,OAAnB;AACA,aAAO,IAAP;AACD,KAXD,MAWO;AACL,aACE;AAAK,QAAA,SAAS,EAAC,uDAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,sCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAM,QAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,EACsD,GADtD,EAEGjB,aAAa,EAFhB,CADF,EAKE,oBAAC,SAAD;AACE,QAAA,QAAQ,EAAE,MAAMZ,QAAQ,EAD1B;AAEE,QAAA,YAAY,EAAE,MAAMK,YAAY,EAFlC;AAGE,QAAA,KAAK,EACHiB,UAAU,CAACQ,IAAX,CAAgBC,eAAhB,CAAgCrC,YAAhC,EAA8CsC,KAA9C,CAAoDC,MAApD,CACGC,GALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,EAcE,oBAAC,QAAD;AACE,QAAA,OAAO,EACLZ,UAAU,CAACQ,IAAX,CAAgBC,eAAhB,CAAgCrC,YAAhC,EAA8CyC,OAFlD;AAIE,QAAA,IAAI,EAAEb,UAAU,CAACQ,IAAX,CAAgBC,eAAhB,CAAgCrC,YAAhC,EAA8C0C,IAJtD;AAKE,QAAA,WAAW,EACTd,UAAU,CAACQ,IAAX,CAAgBC,eAAhB,CAAgCrC,YAAhC,EAA8C2C,WANlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAdF,EAuBE,oBAAC,MAAD;AACE,QAAA,IAAI,EAAE,SADR;AAEE,QAAA,KAAK,EAAE,iBAFT;AAGE,QAAA,MAAM,EAAE,MACN/B,QAAQ,CAACgB,UAAU,CAACQ,IAAX,CAAgBC,eAAhB,CAAgCrC,YAAhC,EAA8Ca,EAA/C,CAJZ;AAME,QAAA,MAAM,EAAE,uBANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAvBF,CADF;AAkCD;AACF,GArDH,CAPF,CADF;AAiED,CAvHD;;AAyHA,eAAef,SAAf","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  updateStorageData,\n  getStorageData\n} from \"../../utilities/localStorage\";\nimport { GET_TRACKS_QUERY } from \"../../graphqlQueries\";\nimport { UNAUTHORIZED } from \"../../utilities/errorTypes\";\n\nimport { Query } from \"react-apollo\";\nimport { SwipeCard } from \"./swipeCard\";\nimport { CardBody } from \"../../components/cardBody\";\nimport { Button } from \"../../components/button\";\nimport { Alert } from \"../../components/alert\";\nimport \"../../Shared.css\";\nimport \"./Dashboard.css\";\n\nconst Dashboard = (props: any) => {\n  const [currentIndex, updateIndex] = useState(0);\n  const [isSongSaved, setIsSongSaved] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  const nextSong = () => {\n    updateIndex(currentIndex + 1);\n    const audioBar = document.querySelector(\n      \".card__audio-bar\"\n    ) as HTMLVideoElement;\n    if (audioBar) audioBar.load();\n  };\n\n  const previousSong = () => {\n    updateIndex(currentIndex - 1);\n    const audioBar = document.querySelector(\n      \".card__audio-bar\"\n    ) as HTMLVideoElement;\n    if (audioBar) audioBar.load();\n  };\n\n  const saveSong = (id: string) => {\n    const savedTracks = getStorageData(\"saved_tracks\");\n\n    if (savedTracks && savedTracks.includes(id)) {\n      setIsError(true);\n      setTimeout(function() {\n        setIsError(false);\n      }, 2000);\n      return;\n    }\n\n    const result = updateStorageData(\"saved_tracks\", id);\n\n    if (result) {\n      setIsSongSaved(true);\n      setTimeout(function() {\n        setIsSongSaved(false);\n      }, 2000);\n    }\n  };\n\n  const displayGenres = () => {\n    const genres = getStorageData(\"selected_genres\");\n\n    return genres.reduce(\n      (acc: string[], value: string, index: number, arr: string[]) => {\n        if (index === arr.length - 1) return acc.concat(value);\n        return acc.concat(`${value}, `);\n      },\n      \"\"\n    );\n  };\n\n  return (\n    <div className=\"d-flex justify-content-center align-items-center h-100 content-wrapper\">\n      {isSongSaved ? (\n        <Alert message={\"Song was successfuly saved!\"} isSuccess={true} />\n      ) : null}\n      {isError ? (\n        <Alert message={\"You already saved this song!\"} isSuccess={false} />\n      ) : null}\n      <Query\n        query={GET_TRACKS_QUERY}\n        variables={{ selectedGenres: getStorageData(\"selected_genres\") }}\n      >\n        {(properties: any) => {\n          if (properties.loading) return <h4>LOADING...</h4>;\n          if (properties.error) {\n            switch (properties.error) {\n              case UNAUTHORIZED:\n                props.history.push({\n                  pathname: \"/\",\n                  state: { authError: true }\n                });\n                break;\n            }\n            props.history.push({ pathname: \"/\", state: { authError: true } });\n            return null;\n          } else {\n            return (\n              <div className=\"content-wrapper d-flex flex-column align-items-center\">\n                <div className=\"heading__secondary mb-3 text-primary\">\n                  <span className=\"text-white\">Current Genres:</span>{\" \"}\n                  {displayGenres()}\n                </div>\n                <SwipeCard\n                  nextSong={() => nextSong()}\n                  previousSong={() => previousSong()}\n                  image={\n                    properties.data.suggestedTracks[currentIndex].album.images\n                      .url\n                  }\n                />\n\n                <CardBody\n                  artists={\n                    properties.data.suggestedTracks[currentIndex].artists\n                  }\n                  name={properties.data.suggestedTracks[currentIndex].name}\n                  preview_url={\n                    properties.data.suggestedTracks[currentIndex].preview_url\n                  }\n                />\n                <Button\n                  type={\"primary\"}\n                  title={\"Add to playlist\"}\n                  action={() =>\n                    saveSong(properties.data.suggestedTracks[currentIndex].id)\n                  }\n                  colors={\"bg-primary text-white\"}\n                />\n              </div>\n            );\n          }\n        }}\n      </Query>\n    </div>\n  );\n};\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}