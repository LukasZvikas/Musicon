{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/lukas/Documents/GitHub/spotify-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/lukas/Documents/GitHub/spotify-app/src/pages/savedSongs/index.tsx\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  query SavedTracks($savedTracks: [String!]!) {\\n    savedTracks(savedTracks: $savedTracks) {\\n      id\\n      name\\n      artists {\\n        name\\n      }\\n      preview_url\\n      album {\\n        images {\\n          url\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport gql from \"graphql-tag\";\nimport { Button } from \"../../components/button\";\nimport { Card } from \"./card\";\nimport { CardBody } from \"../../components/cardBody\";\nimport { Query } from \"react-apollo\";\nimport { getStorageData } from \"../../utilities/localStorage\";\nconst SAVED_TRACKS_QUERY = gql(_templateObject());\n\nconst SavedSongs = ({}) => {\n  const songIds = getStorageData(\"saved_tracks\");\n\n  const authorizeUser = async () => {\n    window.location.href = \"https://accounts.spotify.com/en/authorize?client_id=b1e047dc11e749cfb928e1d33b784a2b&response_type=token&redirect_uri=http:%2F%2Flocalhost:3000%2Fsaved\";\n  };\n\n  const getHash = () => {\n    const hash = window.location.hash.substring(1).split(\"&\").reduce(function (initial, item) {\n      if (item) {\n        var parts = item.split(\"=\");\n        initial[parts[0]] = decodeURIComponent(parts[1]);\n      }\n\n      return initial;\n    }, {});\n    console.log(\"hash\", hash);\n    window.location.hash = \"\"; // Set token\n\n    let _token = hash.access_token;\n    console.log(\"TOKEN\", _token);\n  };\n\n  getHash();\n\n  const renderSongs = songs => {\n    return songs.map((song, index) => React.createElement(\"div\", {\n      className: \"d-flex justify-content-center align-items-center flex-column col-12 col-sm-6 col-md-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(Card, {\n      key: index,\n      image: song.album.images.url,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }), React.createElement(CardBody, {\n      artists: song.artists,\n      preview_url: song.preview_url,\n      name: song.name,\n      style: {\n        name: \"heading__primary-small mb-2 mt-2 text-center\",\n        artist: \"heading__secondary-small mb-4 text-center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    })));\n  };\n\n  return songIds ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(Button, {\n    type: \"primary\",\n    title: \"Add to playlist\",\n    action: () => {\n      authorizeUser();\n    },\n    fill: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }), React.createElement(Query, {\n    query: SAVED_TRACKS_QUERY,\n    variables: {\n      savedTracks: songIds\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, props => {\n    if (props.loading) return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"Loading...\");\n    if (props.error) console.log(\"error\", props.error);else {\n      console.log(\"data\", props.data);\n      return React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, renderSongs(props.data.savedTracks));\n    }\n  })) : null;\n};\n\nexport default SavedSongs;","map":{"version":3,"sources":["/Users/lukas/Documents/GitHub/spotify-app/src/pages/savedSongs/index.tsx"],"names":["React","gql","Button","Card","CardBody","Query","getStorageData","SAVED_TRACKS_QUERY","SavedSongs","songIds","authorizeUser","window","location","href","getHash","hash","substring","split","reduce","initial","item","parts","decodeURIComponent","console","log","_token","access_token","renderSongs","songs","map","song","index","album","images","url","artists","preview_url","name","artist","savedTracks","props","loading","error","data"],"mappings":"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","sourcesContent":["import React, { Fragment } from \"react\";\nimport gql from \"graphql-tag\";\nimport { Button } from \"../../components/button\";\nimport { Card } from \"./card\";\nimport { CardBody } from \"../../components/cardBody\";\nimport { Query } from \"react-apollo\";\nimport { getStorageData } from \"../../utilities/localStorage\";\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\n\nconst SAVED_TRACKS_QUERY = gql`\n  query SavedTracks($savedTracks: [String!]!) {\n    savedTracks(savedTracks: $savedTracks) {\n      id\n      name\n      artists {\n        name\n      }\n      preview_url\n      album {\n        images {\n          url\n        }\n      }\n    }\n  }\n`;\n\nconst SavedSongs = ({}) => {\n  const songIds = getStorageData(\"saved_tracks\");\n  const authorizeUser = async () => {\n    window.location.href =\n      \"https://accounts.spotify.com/en/authorize?client_id=b1e047dc11e749cfb928e1d33b784a2b&response_type=token&redirect_uri=http:%2F%2Flocalhost:3000%2Fsaved\";\n  };\n\n  const getHash = () => {\n    const hash = window.location.hash\n      .substring(1)\n      .split(\"&\")\n      .reduce(function(initial: any, item) {\n        if (item) {\n          var parts = item.split(\"=\");\n          initial[parts[0]] = decodeURIComponent(parts[1]);\n        }\n        return initial;\n      }, {});\n    console.log(\"hash\", hash)\n    window.location.hash = \"\";\n\n    // Set token\n    let _token = hash.access_token;\n    console.log(\"TOKEN\", _token);\n  };\n\n  getHash();\n\n  const renderSongs = (songs: any) => {\n    return songs.map((song: any, index: number) => (\n      <div className=\"d-flex justify-content-center align-items-center flex-column col-12 col-sm-6 col-md-4\">\n        <Card key={index} image={song.album.images.url} />\n        <CardBody\n          artists={song.artists}\n          preview_url={song.preview_url}\n          name={song.name}\n          style={{\n            name: \"heading__primary-small mb-2 mt-2 text-center\",\n            artist: \"heading__secondary-small mb-4 text-center\"\n          }}\n        />\n      </div>\n    ));\n  };\n  return songIds ? (\n    <div>\n      <Button\n        type={\"primary\"}\n        title={\"Add to playlist\"}\n        action={() => {\n          authorizeUser();\n        }}\n        fill={true}\n      />\n\n      <Query query={SAVED_TRACKS_QUERY} variables={{ savedTracks: songIds }}>\n        {(props: any) => {\n          if (props.loading) return <div>Loading...</div>;\n          if (props.error) console.log(\"error\", props.error);\n          else {\n            console.log(\"data\", props.data);\n            return (\n              <div className=\"row\">{renderSongs(props.data.savedTracks)}</div>\n            );\n          }\n        }}\n      </Query>\n    </div>\n  ) : null;\n};\n\nexport default SavedSongs;\n"]},"metadata":{},"sourceType":"module"}