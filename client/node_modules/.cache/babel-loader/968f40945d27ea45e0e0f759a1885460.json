{"ast":null,"code":"import _slicedToArray from \"/Users/lukas/Documents/GitHub/spotify-app/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/lukas/Documents/GitHub/spotify-app/client/src/pages/explore/index.tsx\";\nimport React, { useState } from \"react\";\nimport { updateStorageData, getStorageData } from \"../../utilities/localStorage\";\nimport { GET_TRACKS_QUERY } from \"../../graphqlQueries\";\nimport { QueryError } from \"../../components/queryError\";\nimport { Query } from \"react-apollo\";\nimport { SwipeCard } from \"./swipeCard\";\nimport { CardBody } from \"../../components/cardBody\";\nimport { Button } from \"../../components/button\";\nimport { Alert } from \"../../components/alert\";\nimport { Spinner } from \"../../components/spinner\";\nimport \"../../Shared.css\";\nimport \"./Dashboard.css\";\n\nconst Dashboard = props => {\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        currentIndex = _useState2[0],\n        updateIndex = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isSongSaved = _useState4[0],\n        setIsSongSaved = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        isError = _useState6[0],\n        setIsError = _useState6[1];\n\n  const nextSong = () => {\n    updateIndex(currentIndex + 1);\n    const audioBar = document.querySelector(\".card__audio-bar\");\n    if (audioBar) audioBar.load();\n  };\n\n  const previousSong = () => {\n    updateIndex(currentIndex - 1);\n    const audioBar = document.querySelector(\".card__audio-bar\");\n    if (audioBar) audioBar.load();\n  };\n\n  const saveSong = id => {\n    const savedTracks = getStorageData(\"saved_tracks\");\n\n    if (savedTracks && savedTracks.includes(id)) {\n      setIsError(true);\n      setTimeout(function () {\n        setIsError(false);\n      }, 2000);\n      return;\n    }\n\n    const result = updateStorageData(\"saved_tracks\", id);\n\n    if (result) {\n      setIsSongSaved(true);\n      setTimeout(function () {\n        setIsSongSaved(false);\n      }, 2000);\n    }\n  };\n\n  const displayGenres = () => {\n    const genres = getStorageData(\"selected_genres\");\n    return genres.reduce((acc, value, index, arr) => {\n      if (index === arr.length - 1) return acc.concat(value);\n      return acc.concat(\"\".concat(value, \", \"));\n    }, \"\");\n  };\n\n  return React.createElement(\"div\", {\n    className: \"d-flex justify-content-center align-items-center h-100\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), isSongSaved ? React.createElement(Alert, {\n    message: \"Song was successfuly saved!\",\n    isSuccess: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }) : null, isError ? React.createElement(Alert, {\n    message: \"You already saved this song!\",\n    isSuccess: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }) : null, getStorageData(\"selected_genres\") ? React.createElement(Query, {\n    query: GET_TRACKS_QUERY,\n    variables: {\n      selectedGenres: getStorageData(\"selected_genres\")\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, properties => {\n    if (properties.loading) return React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"LOADING...\");\n\n    if (properties.error) {\n      const error = properties.error.graphQLErrors[0].message;\n      return React.createElement(QueryError, {\n        pushHistory: props.history.push,\n        errorMessage: error,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      });\n    } else {\n      return React.createElement(\"div\", {\n        className: \"content-wrapper d-flex flex-column align-items-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"heading__secondary mb-3 text-primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"text-white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \"Current Genres:\"), \" \", displayGenres()), React.createElement(SwipeCard, {\n        nextSong: () => nextSong(),\n        previousSong: () => previousSong(),\n        image: properties.data.suggestedTracks[currentIndex].album.images.url,\n        listLength: properties.data.suggestedTracks.length,\n        currentIndex: currentIndex,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }), React.createElement(CardBody, {\n        artists: properties.data.suggestedTracks[currentIndex].artists,\n        name: properties.data.suggestedTracks[currentIndex].name,\n        preview_url: properties.data.suggestedTracks[currentIndex].preview_url,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }), React.createElement(Button, {\n        type: \"primary\",\n        title: \"Add to playlist\",\n        action: () => saveSong(properties.data.suggestedTracks[currentIndex].id),\n        colors: \"bg-primary text-white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }));\n    }\n  }) : props.history.push({\n    pathname: \"/\",\n    state: {\n      genresError: true\n    }\n  }));\n};\n\nexport default Dashboard;","map":{"version":3,"sources":["/Users/lukas/Documents/GitHub/spotify-app/client/src/pages/explore/index.tsx"],"names":["React","useState","updateStorageData","getStorageData","GET_TRACKS_QUERY","QueryError","Query","SwipeCard","CardBody","Button","Alert","Spinner","Dashboard","props","currentIndex","updateIndex","isSongSaved","setIsSongSaved","isError","setIsError","nextSong","audioBar","document","querySelector","load","previousSong","saveSong","id","savedTracks","includes","setTimeout","result","displayGenres","genres","reduce","acc","value","index","arr","length","concat","selectedGenres","properties","loading","error","graphQLErrors","message","history","push","data","suggestedTracks","album","images","url","artists","name","preview_url","pathname","state","genresError"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  updateStorageData,\n  getStorageData\n} from \"../../utilities/localStorage\";\nimport { GET_TRACKS_QUERY } from \"../../graphqlQueries\";\nimport { QueryError } from \"../../components/queryError\";\nimport { Query } from \"react-apollo\";\nimport { SwipeCard } from \"./swipeCard\";\nimport { CardBody } from \"../../components/cardBody\";\nimport { Button } from \"../../components/button\";\nimport { Alert } from \"../../components/alert\";\nimport {Spinner} from \"../../components/spinner\";\nimport \"../../Shared.css\";\nimport \"./Dashboard.css\";\n\nconst Dashboard = (props: any) => {\n  const [currentIndex, updateIndex] = useState(0);\n  const [isSongSaved, setIsSongSaved] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  const nextSong = () => {\n    updateIndex(currentIndex + 1);\n    const audioBar = document.querySelector(\n      \".card__audio-bar\"\n    ) as HTMLVideoElement;\n    if (audioBar) audioBar.load();\n  };\n\n  const previousSong = () => {\n    updateIndex(currentIndex - 1);\n    const audioBar = document.querySelector(\n      \".card__audio-bar\"\n    ) as HTMLVideoElement;\n    if (audioBar) audioBar.load();\n  };\n\n  const saveSong = (id: string) => {\n    const savedTracks = getStorageData(\"saved_tracks\");\n\n    if (savedTracks && savedTracks.includes(id)) {\n      setIsError(true);\n      setTimeout(function() {\n        setIsError(false);\n      }, 2000);\n      return;\n    }\n\n    const result = updateStorageData(\"saved_tracks\", id);\n\n    if (result) {\n      setIsSongSaved(true);\n      setTimeout(function() {\n        setIsSongSaved(false);\n      }, 2000);\n    }\n  };\n\n  const displayGenres = () => {\n    const genres = getStorageData(\"selected_genres\");\n\n    return genres.reduce(\n      (acc: string[], value: string, index: number, arr: string[]) => {\n        if (index === arr.length - 1) return acc.concat(value);\n        return acc.concat(`${value}, `);\n      },\n      \"\"\n    );\n  };\n\n  return (\n    <div className=\"d-flex justify-content-center align-items-center h-100\">\n    <Spinner />\n      {isSongSaved ? (\n        <Alert message={\"Song was successfuly saved!\"} isSuccess={true} />\n      ) : null}\n      {isError ? (\n        <Alert message={\"You already saved this song!\"} isSuccess={false} />\n      ) : null}\n\n      {getStorageData(\"selected_genres\") ? (\n        <Query\n          query={GET_TRACKS_QUERY}\n          variables={{ selectedGenres: getStorageData(\"selected_genres\") }}\n        >\n          {(properties: any) => {\n            if (properties.loading) return <h4>LOADING...</h4>;\n            if (properties.error) {\n              const error = properties.error.graphQLErrors[0].message;\n              return (\n                <QueryError\n                  pushHistory={props.history.push}\n                  errorMessage={error}\n                />\n              );\n            } else {\n              return (\n                <div className=\"content-wrapper d-flex flex-column align-items-center\">\n                  <div className=\"heading__secondary mb-3 text-primary\">\n                    <span className=\"text-white\">Current Genres:</span>{\" \"}\n                    {displayGenres()}\n                  </div>\n                  <SwipeCard\n                    nextSong={() => nextSong()}\n                    previousSong={() => previousSong()}\n                    image={\n                      properties.data.suggestedTracks[currentIndex].album.images\n                        .url\n                    }\n                    listLength={properties.data.suggestedTracks.length}\n                    currentIndex={currentIndex}\n                  />\n\n                  <CardBody\n                    artists={\n                      properties.data.suggestedTracks[currentIndex].artists\n                    }\n                    name={properties.data.suggestedTracks[currentIndex].name}\n                    preview_url={\n                      properties.data.suggestedTracks[currentIndex].preview_url\n                    }\n                  />\n                  <Button\n                    type={\"primary\"}\n                    title={\"Add to playlist\"}\n                    action={() =>\n                      saveSong(properties.data.suggestedTracks[currentIndex].id)\n                    }\n                    colors={\"bg-primary text-white\"}\n                  />\n                </div>\n              );\n            }\n          }}\n        </Query>\n      ) : (\n        props.history.push({\n          pathname: \"/\",\n          state: { genresError: true }\n        })\n      )}\n    </div>\n  );\n};\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}