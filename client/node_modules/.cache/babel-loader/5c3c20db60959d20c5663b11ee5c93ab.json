{"ast":null,"code":"import _slicedToArray from \"/Users/lukas/Documents/GitHub/spotify-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/lukas/Documents/GitHub/spotify-app/src/pages/savedSongs/index.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { SAVED_TRACKS_QUERY, USER_PLAYLISTS_QUERY, USER_DETAILS_QUERY, ADD_TO_PLAYLIST_QUERY } from \"../../graphqlQueries\";\nimport { SAVED_TRACKS_ERROR, UNAUTHORIZED } from \"../../utilities/errorTypes\";\nimport { Button } from \"../../components/button\";\nimport { client } from \"../../App\";\nimport { Card } from \"./card\";\nimport { Modal } from \"../../components/modal\";\nimport { PlaylistModalBody } from \"./savedModalBody\";\nimport { CardBody } from \"../../components/cardBody\";\nimport { Alert } from \"../../components/alert\";\nimport { Query } from \"react-apollo\";\nimport { getStorageData, setStorageData } from \"../../utilities/localStorage\";\nimport \"./SavedSongs.css\";\nimport \"../../Shared.css\";\n\nconst SavedSongs = props => {\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        username = _useState2[0],\n        setUsername = _useState2[1];\n\n  const _useState3 = useState({\n    id: \"\",\n    name: \"\"\n  }),\n        _useState4 = _slicedToArray(_useState3, 2),\n        currentPlaylist = _useState4[0],\n        setCurrentPlaylist = _useState4[1];\n\n  const _useState5 = useState([]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        userPlaylists = _useState6[0],\n        setUserPlaylists = _useState6[1];\n\n  const _useState7 = useState(\"\"),\n        _useState8 = _slicedToArray(_useState7, 2),\n        songIds = _useState8[0],\n        setSongIds = _useState8[1];\n\n  const _useState9 = useState([]),\n        _useState10 = _slicedToArray(_useState9, 2),\n        savedSongs = _useState10[0],\n        setSavedSongs = _useState10[1];\n\n  const _useState11 = useState(false),\n        _useState12 = _slicedToArray(_useState11, 2),\n        modalState = _useState12[0],\n        setModalState = _useState12[1];\n\n  const _useState13 = useState(\"\"),\n        _useState14 = _slicedToArray(_useState13, 2),\n        isSavedPlaylist = _useState14[0],\n        setIsSavedPlaylist = _useState14[1];\n\n  useEffect(() => {\n    const ids = getStorageData(\"saved_tracks\");\n    console.log(\"ids\", ids);\n    setSongIds(ids);\n    client.query({\n      query: USER_DETAILS_QUERY\n    }).then(({\n      data: {\n        userDetails: {\n          display_name\n        }\n      }\n    }) => {\n      playlistQuery(display_name);\n      setUsername(display_name);\n    }).catch(err => console.log(\"ERROR\", err));\n  }, []);\n\n  const playlistQuery = username => {\n    client.query({\n      query: USER_PLAYLISTS_QUERY,\n      variables: {\n        username\n      }\n    }).then(result => {\n      setCurrentPlaylist(result.data.userPlaylists[0]);\n      setUserPlaylists(result.data.userPlaylists);\n    }).catch(err => console.log(\"ERROR\", err));\n  };\n\n  const addToPlaylistQuery = () => {\n    if (currentPlaylist.id) client.query({\n      query: ADD_TO_PLAYLIST_QUERY,\n      variables: {\n        songIds: getStorageData(\"saved_tracks\"),\n        playlist_id: currentPlaylist.id\n      }\n    }).then(result => {\n      setIsSavedPlaylist(result.data.addToPlaylist.snapshot_id);\n      setTimeout(function () {\n        setIsSavedPlaylist(\"\");\n      }, 2000);\n    }).catch(err => console.log(\"ERROR\", err));\n  };\n\n  const removeSong = trackId => {\n    const newSongTracks = savedSongs.filter(item => item.id !== trackId);\n    setStorageData(\"saved_tracks\", newSongTracks);\n    setSavedSongs(newSongTracks);\n  };\n\n  const handleSelectChange = value => {\n    setCurrentPlaylist(value);\n  };\n\n  const renderSongs = songs => {\n    return songs.map((song, index) => React.createElement(\"div\", {\n      className: \"d-flex justify-content-center align-items-center flex-column col-12 col-md-6 col-lg-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(Card, {\n      key: index,\n      image: song.album.images.url,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }), React.createElement(CardBody, {\n      artists: song.artists,\n      preview_url: song.preview_url,\n      name: song.name,\n      style: {\n        name: \"heading__primary-small mb-2 mt-2 text-center\",\n        artist: \"heading__secondary-small mb-3 text-center text-white\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"heading__secondary-small mt-2 text-primary\",\n      style: {\n        cursor: \"pointer\"\n      },\n      onClick: () => removeSong(song.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"Remove this song\")));\n  };\n\n  const getPlaylistId = name => {\n    const playlist = userPlaylists.filter(item => item.name === name);\n    return playlist[0].id;\n  };\n\n  const renderPlaylists = arr => arr.map((item, index) => React.createElement(\"option\", {\n    key: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, item.name));\n\n  const changeModalState = () => {\n    return setModalState(!modalState);\n  };\n\n  return songIds ? React.createElement(Query, {\n    query: SAVED_TRACKS_QUERY,\n    variables: {\n      savedTracks: songIds\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, properties => {\n    if (properties.loading) return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \"Loading...\");\n\n    if (properties.error) {\n      const error = properties.error.graphQLErrors[0].message;\n\n      switch (error) {\n        case SAVED_TRACKS_ERROR:\n          return React.createElement(\"div\", {\n            className: \"heading__primary content-wrapper d-flex justify-content-center\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 153\n            },\n            __self: this\n          }, \"You haven't saved any tracks yet.\");\n\n        case UNAUTHORIZED:\n          props.history.push({\n            pathname: \"/\",\n            state: {\n              authError: true\n            }\n          });\n          break;\n\n        default:\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 162\n            },\n            __self: this\n          }, \"There was a problem with our server. We are working on it.\");\n      }\n    } else {\n      !savedSongs.length && setSavedSongs(properties.data.savedTracks);\n      if (!savedSongs.length) return React.createElement(\"div\", {\n        className: \"heading__primary content-wrapper d-flex justify-content-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, \"You haven't saved any tracks yet.\");\n      return username && currentPlaylist ? React.createElement(\"div\", {\n        className: \"content-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, isSavedPlaylist ? React.createElement(Alert, {\n        message: \"Selected songs were successfully added to your playlist\",\n        isSuccess: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }) : null, React.createElement(Modal, {\n        show: modalState,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, React.createElement(PlaylistModalBody, {\n        name: currentPlaylist.name,\n        changeModalState: () => changeModalState(),\n        addToPlaylist: () => addToPlaylistQuery(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"d-flex justify-content-center align-items-center mb-3 flex-column\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"heading__primary mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, \"Choose your playlist\"), React.createElement(\"select\", {\n        className: \"select-input\",\n        onChange: e => handleSelectChange({\n          name: e.target.value,\n          id: getPlaylistId(e.target.value)\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, renderPlaylists(userPlaylists)), React.createElement(Button, {\n        type: \"primary\",\n        title: \"Add these songs to \\\"\".concat(currentPlaylist.name, \"\\\"\"),\n        action: () => {\n          changeModalState();\n        },\n        colors: \"bg-primary text-white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, renderSongs(savedSongs))) : React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, \"Please login\");\n    }\n  }) : null;\n};\n\nexport default SavedSongs;","map":{"version":3,"sources":["/Users/lukas/Documents/GitHub/spotify-app/src/pages/savedSongs/index.tsx"],"names":["React","useEffect","useState","SAVED_TRACKS_QUERY","USER_PLAYLISTS_QUERY","USER_DETAILS_QUERY","ADD_TO_PLAYLIST_QUERY","SAVED_TRACKS_ERROR","UNAUTHORIZED","Button","client","Card","Modal","PlaylistModalBody","CardBody","Alert","Query","getStorageData","setStorageData","SavedSongs","props","username","setUsername","id","name","currentPlaylist","setCurrentPlaylist","userPlaylists","setUserPlaylists","songIds","setSongIds","savedSongs","setSavedSongs","modalState","setModalState","isSavedPlaylist","setIsSavedPlaylist","ids","console","log","query","then","data","userDetails","display_name","playlistQuery","catch","err","variables","result","addToPlaylistQuery","playlist_id","addToPlaylist","snapshot_id","setTimeout","removeSong","trackId","newSongTracks","filter","item","handleSelectChange","value","renderSongs","songs","map","song","index","album","images","url","artists","preview_url","artist","cursor","getPlaylistId","playlist","renderPlaylists","arr","changeModalState","savedTracks","properties","loading","error","graphQLErrors","message","history","push","pathname","state","authError","length","e","target"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  SAVED_TRACKS_QUERY,\n  USER_PLAYLISTS_QUERY,\n  USER_DETAILS_QUERY,\n  ADD_TO_PLAYLIST_QUERY\n} from \"../../graphqlQueries\";\nimport { SAVED_TRACKS_ERROR, UNAUTHORIZED } from \"../../utilities/errorTypes\";\nimport { Button } from \"../../components/button\";\nimport { client } from \"../../App\";\nimport { Card } from \"./card\";\nimport { Modal } from \"../../components/modal\";\nimport { PlaylistModalBody } from \"./savedModalBody\";\nimport { CardBody } from \"../../components/cardBody\";\nimport { Alert } from \"../../components/alert\";\nimport { Query } from \"react-apollo\";\nimport { getStorageData, setStorageData } from \"../../utilities/localStorage\";\nimport \"./SavedSongs.css\";\nimport \"../../Shared.css\";\n\nconst SavedSongs = (props: any) => {\n  const [username, setUsername] = useState(\"\");\n  const [currentPlaylist, setCurrentPlaylist] = useState({ id: \"\", name: \"\" });\n  const [userPlaylists, setUserPlaylists] = useState([]);\n  const [songIds, setSongIds] = useState(\"\");\n  const [savedSongs, setSavedSongs] = useState([]);\n  const [modalState, setModalState] = useState(false);\n  const [isSavedPlaylist, setIsSavedPlaylist] = useState(\"\");\n\n  useEffect(() => {\n    const ids = getStorageData(\"saved_tracks\");\n    console.log(\"ids\", ids);\n    setSongIds(ids);\n    client\n      .query({\n        query: USER_DETAILS_QUERY\n      })\n      .then(({ data: { userDetails: { display_name } } }) => {\n        playlistQuery(display_name);\n        setUsername(display_name);\n      })\n      .catch(err => console.log(\"ERROR\", err));\n  }, []);\n\n  const playlistQuery = (username: string) => {\n    client\n      .query({\n        query: USER_PLAYLISTS_QUERY,\n        variables: { username }\n      })\n      .then(result => {\n        setCurrentPlaylist(result.data.userPlaylists[0]);\n        setUserPlaylists(result.data.userPlaylists);\n      })\n      .catch(err => console.log(\"ERROR\", err));\n  };\n\n  const addToPlaylistQuery = () => {\n    if (currentPlaylist.id)\n      client\n        .query({\n          query: ADD_TO_PLAYLIST_QUERY,\n          variables: {\n            songIds: getStorageData(\"saved_tracks\"),\n            playlist_id: currentPlaylist.id\n          }\n        })\n        .then(result => {\n          setIsSavedPlaylist(result.data.addToPlaylist.snapshot_id);\n          setTimeout(function() {\n            setIsSavedPlaylist(\"\");\n          }, 2000);\n        })\n        .catch(err => console.log(\"ERROR\", err));\n  };\n\n  const removeSong = (trackId: string) => {\n    const newSongTracks = savedSongs.filter((item: any) => item.id !== trackId);\n    setStorageData(\"saved_tracks\", newSongTracks);\n    setSavedSongs(newSongTracks);\n  };\n\n  const handleSelectChange = (value: { name: string; id: string }) => {\n    setCurrentPlaylist(value);\n  };\n\n  const renderSongs = (\n    songs: {\n      id: string;\n      album: { images: { url: string } };\n      artists: { name: string }[];\n      preview_url: string;\n      name: string;\n    }[]\n  ) => {\n    return songs.map(\n      (\n        song: {\n          id: string;\n          album: { images: { url: string } };\n          artists: { name: string }[];\n          preview_url: string;\n          name: string;\n        },\n        index: number\n      ) => (\n        <div className=\"d-flex justify-content-center align-items-center flex-column col-12 col-md-6 col-lg-4\">\n          <Card key={index} image={song.album.images.url} />\n          <CardBody\n            artists={song.artists}\n            preview_url={song.preview_url}\n            name={song.name}\n            style={{\n              name: \"heading__primary-small mb-2 mt-2 text-center\",\n              artist: \"heading__secondary-small mb-3 text-center text-white\"\n            }}\n          />\n          <div\n            className=\"heading__secondary-small mt-2 text-primary\"\n            style={{ cursor: \"pointer\" }}\n            onClick={() => removeSong(song.id)}\n          >\n            Remove this song\n          </div>\n        </div>\n      )\n    );\n  };\n\n  const getPlaylistId = (name: string): string => {\n    const playlist: { name: string; id: string }[] = userPlaylists.filter(\n      (item: { name: string; id: string }) => item.name === name\n    );\n    return playlist[0].id;\n  };\n\n  const renderPlaylists = (arr: { name: string; id: string }[]) =>\n    arr.map((item, index) => <option key={index}>{item.name}</option>);\n\n  const changeModalState = () => {\n    return setModalState(!modalState);\n  };\n\n  return songIds ? (\n    <Query query={SAVED_TRACKS_QUERY} variables={{ savedTracks: songIds }}>\n      {(properties: any) => {\n        if (properties.loading) return <div>Loading...</div>;\n        if (properties.error) {\n          const error = properties.error.graphQLErrors[0].message;\n          switch (error) {\n            case SAVED_TRACKS_ERROR:\n              return (\n                <div className=\"heading__primary content-wrapper d-flex justify-content-center\">\n                  You haven't saved any tracks yet.\n                </div>\n              );\n            case UNAUTHORIZED:\n              props.history.push({ pathname: \"/\", state: { authError: true } });\n              break;\n            default:\n              return (\n                <div>\n                  There was a problem with our server. We are working on it.\n                </div>\n              );\n          }\n        } else {\n          !savedSongs.length && setSavedSongs(properties.data.savedTracks);\n          if (!savedSongs.length)\n            return (\n              <div className=\"heading__primary content-wrapper d-flex justify-content-center\">\n                You haven't saved any tracks yet.\n              </div>\n            );\n          return username && currentPlaylist ? (\n            <div className=\"content-wrapper\">\n              {isSavedPlaylist ? (\n                <Alert\n                  message={\n                    \"Selected songs were successfully added to your playlist\"\n                  }\n                  isSuccess={true}\n                />\n              ) : null}\n              <Modal show={modalState}>\n                <PlaylistModalBody\n                  name={currentPlaylist.name}\n                  changeModalState={() => changeModalState()}\n                  addToPlaylist={() => addToPlaylistQuery()}\n                />\n              </Modal>\n              <div className=\"d-flex justify-content-center align-items-center mb-3 flex-column\">\n                <div className=\"heading__primary mb-3\">\n                  Choose your playlist\n                </div>\n                <select\n                  className=\"select-input\"\n                  onChange={e =>\n                    handleSelectChange({\n                      name: e.target.value,\n                      id: getPlaylistId(e.target.value)\n                    })\n                  }\n                >\n                  {renderPlaylists(userPlaylists)}\n                </select>\n                <Button\n                  type={\"primary\"}\n                  title={`Add these songs to \"${currentPlaylist.name}\"`}\n                  action={() => {\n                    changeModalState();\n                  }}\n                  colors={\"bg-primary text-white\"}\n                />\n              </div>\n              <div className=\"row\">{renderSongs(savedSongs)}</div>\n            </div>\n          ) : (\n            <div>Please login</div>\n          );\n        }\n      }}\n    </Query>\n  ) : null;\n};\n\nexport default SavedSongs;\n"]},"metadata":{},"sourceType":"module"}