{"ast":null,"code":"import _slicedToArray from \"/Users/lukas/Documents/GitHub/spotify-app/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/lukas/Documents/GitHub/spotify-app/client/src/pages/quiz/index.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { quizData } from \"./quizData\";\nimport { Button } from \"../../components/button\";\nimport { SpotifyIcon } from \"../../svg/spotifyIcon\";\nimport { Alert } from \"../../components/alert\";\nimport { getStorageData, setStorageData } from \"../../utilities/localStorage\";\nimport \"./Quiz.css\";\nimport \"../../Shared.css\";\n\nconst Quiz = props => {\n  const _useState = useState(new Array()),\n        _useState2 = _slicedToArray(_useState, 2),\n        genreState = _useState2[0],\n        changeGenreState = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isLoginSuccess = _useState4[0],\n        changeLoginSuccess = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        isLoginError = _useState6[0],\n        setIsLoginError = _useState6[1];\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        isGenresError = _useState8[0],\n        setIsGenresError = _useState8[1];\n\n  const authorizeUser = async () => {\n    const redirectUri = window.location.href;\n    window.location.href = \"https://accounts.spotify.com/en/authorize?client_id=b1e047dc11e749cfb928e1d33b784a2b&response_type=token&redirect_uri=\".concat(redirectUri, \"&scope=playlist-modify-public\");\n  };\n\n  const onLoginError = () => {\n    setIsLoginError(true);\n    setTimeout(function () {\n      setIsLoginError(false);\n    }, 2000);\n  };\n\n  const onGenresError = () => {\n    setIsGenresError(true);\n    setTimeout(function () {\n      setIsGenresError(false);\n    }, 2000);\n  };\n\n  const getHash = () => {\n    const hash = window.location.hash.substring(1).split(\"&\").reduce(function (initial, item) {\n      if (item) {\n        var parts = item.split(\"=\");\n        initial[parts[0]] = decodeURIComponent(parts[1]);\n      }\n\n      return initial;\n    }, {});\n    window.location.hash = \"\";\n    let _token = hash.access_token;\n\n    if (_token) {\n      changeLoginSuccess(true);\n      setTimeout(function () {\n        changeLoginSuccess(false);\n      }, 2000);\n    }\n\n    return _token;\n  };\n\n  useEffect(() => {\n    if (props.location.state && props.location.state.authError) {\n      props.history.replace({\n        pathname: \"/\",\n        state: {\n          authError: false\n        }\n      });\n      onLoginError();\n      return;\n    }\n\n    if (props.location.state && props.location.state.genresError) {\n      props.history.replace({\n        pathname: \"/\",\n        state: {\n          genresError: false\n        }\n      });\n      onGenresError();\n      return;\n    }\n\n    const selectedGenres = getStorageData(\"selected_genres\");\n    if (selectedGenres) changeGenreState(selectedGenres);\n    const token = getHash();\n    if (token) localStorage.setItem(\"token\", token);\n    return;\n  }, []);\n\n  const onGenreClick = name => {\n    let newState;\n\n    if (!genreState.includes(name) && genreState.length < 3) {\n      newState = genreState;\n      newState.push(name);\n      changeGenreState([...newState]);\n    } else {\n      const indexOfItem = genreState.indexOf(name);\n      if (indexOfItem === -1) return;\n      newState = genreState;\n      newState.splice(indexOfItem, 1);\n      changeGenreState([...newState]);\n    }\n  };\n\n  const renderGenres = genres => {\n    return genres.map((item, index) => React.createElement(\"div\", {\n      className: \"px-1 col-6 col-sm-5 col-md-2\",\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"quiz-empty\",\n      title: item.genre,\n      action: () => onGenreClick(item.genre),\n      colors: genreState.includes(item.genre) ? \"bg-primary text-white\" : \"bg-white text-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    })));\n  };\n\n  return React.createElement(\"div\", {\n    className: \"quiz h-100 content-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, isLoginSuccess ? React.createElement(Alert, {\n    message: \"You have logged in successfully!\",\n    isSuccess: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }) : null, isLoginError ? React.createElement(Alert, {\n    message: \"Please login first!\",\n    isSuccess: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }) : null, isGenresError ? React.createElement(Alert, {\n    message: \"Please choose at least one genre first!\",\n    isSuccess: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }) : null, React.createElement(\"div\", {\n    className: \"heading__primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, \"Before We Start!\"), React.createElement(\"div\", {\n    className: \"d-flex align-items-center heading__secondary px-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"text-white\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, \"1.\"), React.createElement(Button, {\n    type: \"primary ml-3\",\n    title: \"Login with Spotify\",\n    action: () => {\n      authorizeUser();\n    },\n    colors: \"bg-black text-white\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(SpotifyIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"heading__secondary d-flex mb-4 mt-2 px-3 text-center text-white\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"text-white mx-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, \"2.\"), \"Choose up to three of your favorite music genres. Save the songs that you like and transfer them right to your real Spotify playlist!\", \" \"), React.createElement(\"div\", {\n    className: \"quiz__genres row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, renderGenres(quizData)), React.createElement(Button, {\n    type: \"primary\",\n    title: \"I'm ready!\",\n    colors: \"bg-primary text-white\",\n    action: () => {\n      if (!getStorageData(\"token\")) return onLoginError();\n      return !genreState.length ? onGenresError() : (setStorageData(\"selected_genres\", genreState), props.history.push(\"/explore\"));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }));\n};\n\nexport default Quiz;","map":{"version":3,"sources":["/Users/lukas/Documents/GitHub/spotify-app/client/src/pages/quiz/index.tsx"],"names":["React","useState","useEffect","quizData","Button","SpotifyIcon","Alert","getStorageData","setStorageData","Quiz","props","Array","genreState","changeGenreState","isLoginSuccess","changeLoginSuccess","isLoginError","setIsLoginError","isGenresError","setIsGenresError","authorizeUser","redirectUri","window","location","href","onLoginError","setTimeout","onGenresError","getHash","hash","substring","split","reduce","initial","item","parts","decodeURIComponent","_token","access_token","state","authError","history","replace","pathname","genresError","selectedGenres","token","localStorage","setItem","onGenreClick","name","newState","includes","length","push","indexOfItem","indexOf","splice","renderGenres","genres","map","index","genre"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { quizData } from \"./quizData\";\nimport { Button } from \"../../components/button\";\nimport { SpotifyIcon } from \"../../svg/spotifyIcon\";\nimport { Alert } from \"../../components/alert\";\nimport { getStorageData, setStorageData } from \"../../utilities/localStorage\";\nimport \"./Quiz.css\";\nimport \"../../Shared.css\";\n\nconst Quiz = (props: any) => {\n    const [genreState, changeGenreState] = useState(new Array());\n    const [isLoginSuccess, changeLoginSuccess] = useState(false);\n    const [isLoginError, setIsLoginError] = useState(false);\n    const [isGenresError, setIsGenresError] = useState(false);\n\n    const authorizeUser = async () => {\n        const redirectUri = window.location.href;\n        window.location.href = `https://accounts.spotify.com/en/authorize?client_id=b1e047dc11e749cfb928e1d33b784a2b&response_type=token&redirect_uri=${redirectUri}&scope=playlist-modify-public`;\n    };\n\n    const onLoginError = (): void => {\n        setIsLoginError(true);\n        setTimeout(function() {\n            setIsLoginError(false);\n        }, 2000);\n    };\n\n    const onGenresError = (): void => {\n        setIsGenresError(true);\n        setTimeout(function() {\n            setIsGenresError(false);\n        }, 2000);\n    };\n\n    const getHash = (): string => {\n        const hash = window.location.hash\n            .substring(1)\n            .split(\"&\")\n            .reduce(function(initial: any, item) {\n                if (item) {\n                    var parts = item.split(\"=\");\n                    initial[parts[0]] = decodeURIComponent(parts[1]);\n                }\n                return initial;\n            }, {});\n\n        window.location.hash = \"\";\n\n        let _token = hash.access_token;\n        if (_token) {\n            changeLoginSuccess(true);\n            setTimeout(function() {\n                changeLoginSuccess(false);\n            }, 2000);\n        }\n        return _token;\n    };\n\n    useEffect(() => {\n        if (props.location.state && props.location.state.authError) {\n            props.history.replace({ pathname: \"/\", state: { authError: false } });\n            onLoginError();\n            return;\n        }\n\n        if (props.location.state && props.location.state.genresError) {\n            props.history.replace({ pathname: \"/\", state: { genresError: false } });\n            onGenresError();\n            return;\n        }\n\n        const selectedGenres = getStorageData(\"selected_genres\");\n\n        if (selectedGenres) changeGenreState(selectedGenres);\n\n        const token = getHash();\n        if (token) localStorage.setItem(\"token\", token);\n        return;\n    }, []);\n\n    const onGenreClick = (name: string): void => {\n        let newState;\n        if (!genreState.includes(name) && genreState.length < 3) {\n            newState = genreState;\n            newState.push(name);\n            changeGenreState([...newState]);\n        } else {\n            const indexOfItem = genreState.indexOf(name);\n\n            if (indexOfItem === -1) return;\n\n            newState = genreState;\n            newState.splice(indexOfItem, 1);\n\n            changeGenreState([...newState]);\n        }\n    };\n\n    const renderGenres = (genres: { genre: string }[]) => {\n        return genres.map((item: { genre: string }, index: number) => (\n            <div className=\"px-1 col-6 col-sm-5 col-md-2\" key={index}>\n                <Button\n                    type={\"quiz-empty\"}\n                    title={item.genre}\n                    action={() => onGenreClick(item.genre)}\n                    colors={\n                        genreState.includes(item.genre)\n                            ? \"bg-primary text-white\"\n                            : \"bg-white text-primary\"\n                    }\n                />\n            </div>\n        ));\n    };\n\n    return (\n        <div className=\"quiz h-100 content-wrapper\">\n            {isLoginSuccess ? (\n                <Alert message={\"You have logged in successfully!\"} isSuccess={true} />\n            ) : null}\n            {isLoginError ? (\n                <Alert message={\"Please login first!\"} isSuccess={false} />\n            ) : null}\n            {isGenresError ? (\n                <Alert\n                    message={\"Please choose at least one genre first!\"}\n                    isSuccess={false}\n                />\n            ) : null}\n            <div className=\"heading__primary\">Before We Start!</div>\n            <div className=\"d-flex align-items-center heading__secondary px-3\">\n                <div className=\"text-white\">1.</div>\n                <Button\n                    type={\"primary ml-3\"}\n                    title={\"Login with Spotify\"}\n                    action={() => {\n                        authorizeUser();\n                    }}\n                    colors={\"bg-black text-white\"}\n                >\n                    <SpotifyIcon />\n                </Button>\n            </div>\n            <div className=\"heading__secondary d-flex mb-4 mt-2 px-3 text-center text-white\">\n                <div className=\"text-white mx-2\">2.</div>\n        Choose up to three of your favorite music genres. Save the songs that\n        you like and transfer them right to your real Spotify playlist!{\" \"}\n            </div>\n            <div className=\"quiz__genres row\">{renderGenres(quizData)}</div>\n\n            <Button\n                type={\"primary\"}\n                title={\"I'm ready!\"}\n                colors={\"bg-primary text-white\"}\n                action={() => {\n                    if (!getStorageData(\"token\")) return onLoginError();\n                    return !genreState.length\n                        ? onGenresError()\n                        : (setStorageData(\"selected_genres\", genreState),\n                        props.history.push(\"/explore\"));\n                }}\n            />\n        </div>\n    );\n};\n\nexport default Quiz;\n"]},"metadata":{},"sourceType":"module"}