{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/lukas/Documents/GitHub/spotify-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/lukas/Documents/GitHub/spotify-app/src/pages/savedSongs/index.tsx\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  query SavedTracks($savedTracks: [String!]!) {\\n    savedTracks(savedTracks: $savedTracks) {\\n      id\\n      name\\n      artists {\\n        name\\n      }\\n      preview_url\\n      album {\\n        images {\\n          url\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport gql from \"graphql-tag\";\nimport { Card } from \"./card\";\nimport { Query } from \"react-apollo\";\nimport { getStorageData } from \"../../utilities/localStorage\";\nconst SAVED_TRACKS_QUERY = gql(_templateObject());\n\nconst SavedSongs = ({}) => {\n  const songIds = getStorageData(\"saved_tracks\");\n  console.log(songIds);\n\n  const renderSongs = songs => {\n    console.log(\"songs\", songs);\n    return songs.map((song, index) => React.createElement(Card, {\n      image: songs.album.images.url,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }));\n  };\n\n  return songIds ? React.createElement(Query, {\n    query: SAVED_TRACKS_QUERY,\n    variables: {\n      savedTracks: songIds\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, props => {\n    if (props.loading) return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, \"Loading...\");\n    if (props.error) console.log(\"error\", props.error);else {\n      console.log(\"data\", props.data);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, renderSongs(props.data.savedTracks));\n    }\n  }) : null;\n};\n\nexport default SavedSongs;","map":{"version":3,"sources":["/Users/lukas/Documents/GitHub/spotify-app/src/pages/savedSongs/index.tsx"],"names":["React","gql","Card","Query","getStorageData","SAVED_TRACKS_QUERY","SavedSongs","songIds","console","log","renderSongs","songs","map","song","index","album","images","url","savedTracks","props","loading","error","data"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,SAASC,cAAT,QAA+B,8BAA/B;AAEA,MAAMC,kBAAkB,GAAGJ,GAAH,mBAAxB;;AAkBA,MAAMK,UAAU,GAAG,CAAC,EAAD,KAAQ;AACzB,QAAMC,OAAO,GAAGH,cAAc,CAAC,cAAD,CAA9B;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;;AAEA,QAAMG,WAAW,GAAIC,KAAD,IAAqB;AACvCH,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBE,KAArB;AACA,WAAOA,KAAK,CAACC,GAAN,CAAU,CAACC,IAAD,EAAYC,KAAZ,KAAsB,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAEH,KAAK,CAACI,KAAN,CAAYC,MAAZ,CAAmBC,GAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAhC,CAAP;AACD,GAHD;;AAIA,SAAOV,OAAO,GACZ,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAEF,kBAAd;AAAkC,IAAA,SAAS,EAAE;AAAEa,MAAAA,WAAW,EAAEX;AAAf,KAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIY,KAAD,IAAgB;AACf,QAAIA,KAAK,CAACC,OAAV,EAAmB,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACnB,QAAID,KAAK,CAACE,KAAV,EAAiBb,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBU,KAAK,CAACE,KAA3B,EAAjB,KACK;AACHb,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBU,KAAK,CAACG,IAA1B;AACA,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAMZ,WAAW,CAACS,KAAK,CAACG,IAAN,CAAWJ,WAAZ,CAAjB,CAAP;AACD;AACF,GARH,CADY,GAWV,IAXJ;AAYD,CApBD;;AAsBA,eAAeZ,UAAf","sourcesContent":["import React from \"react\";\nimport gql from \"graphql-tag\";\nimport { Card } from \"./card\";\nimport { Query } from \"react-apollo\";\nimport { getStorageData } from \"../../utilities/localStorage\";\n\nconst SAVED_TRACKS_QUERY = gql`\n  query SavedTracks($savedTracks: [String!]!) {\n    savedTracks(savedTracks: $savedTracks) {\n      id\n      name\n      artists {\n        name\n      }\n      preview_url\n      album {\n        images {\n          url\n        }\n      }\n    }\n  }\n`;\n\nconst SavedSongs = ({}) => {\n  const songIds = getStorageData(\"saved_tracks\");\n  console.log(songIds);\n\n  const renderSongs = (songs: object[]) => {\n    console.log(\"songs\", songs);\n    return songs.map((song: any, index) => <Card image={songs.album.images.url} />);\n  };\n  return songIds ? (\n    <Query query={SAVED_TRACKS_QUERY} variables={{ savedTracks: songIds }}>\n      {(props: any) => {\n        if (props.loading) return <div>Loading...</div>;\n        if (props.error) console.log(\"error\", props.error);\n        else {\n          console.log(\"data\", props.data);\n          return <div>{renderSongs(props.data.savedTracks)}</div>;\n        }\n      }}\n    </Query>\n  ) : null;\n};\n\nexport default SavedSongs;\n"]},"metadata":{},"sourceType":"module"}