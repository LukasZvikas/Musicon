{"ast":null,"code":"import _slicedToArray from \"/Users/lukas/Documents/GitHub/spotify-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/lukas/Documents/GitHub/spotify-app/src/pages/quiz/index.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { quizData } from \"./quizData\";\nimport { Button } from \"../../components/button\";\nimport { SpotifyIcon } from \"../../svg/spotifyIcon\";\nimport { Alert } from \"../../components/alert\";\nimport { getStorageData, setStorageData } from \"../../utilities/localStorage\";\nimport \"./Quiz.css\";\nimport \"../../Shared.css\";\n\nconst Quiz = props => {\n  const _useState = useState(new Array()),\n        _useState2 = _slicedToArray(_useState, 2),\n        genreState = _useState2[0],\n        changeGenreState = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isLoginSuccess = _useState4[0],\n        changeLoginSuccess = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        isLoginError = _useState6[0],\n        setIsLoginError = _useState6[1];\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        isGenresError = _useState8[0],\n        setIsGenresError = _useState8[1];\n\n  const authorizeUser = async () => {\n    window.location.href = \"https://accounts.spotify.com/en/authorize?client_id=b1e047dc11e749cfb928e1d33b784a2b&response_type=token&redirect_uri=http:%2F%2Flocalhost:3000%2F&scope=playlist-modify-public\";\n  };\n\n  useEffect(() => {\n    if (props.location.state && props.location.state.authError) {\n      props.history.replace({\n        pathname: \"/\",\n        state: {\n          authError: false\n        }\n      });\n      onLoginError();\n      return;\n    }\n\n    if (props.location.state && props.location.state.genresError) {\n      props.history.replace({\n        pathname: \"/\",\n        state: {\n          genresError: false\n        }\n      });\n      onGenresError();\n      return;\n    }\n\n    const selectedGenres = getStorageData(\"selected_genres\");\n    if (selectedGenres) changeGenreState(selectedGenres);\n    const token = getHash();\n    if (token) localStorage.setItem(\"token\", token);\n    return;\n  }, []);\n\n  const getHash = () => {\n    const hash = window.location.hash.substring(1).split(\"&\").reduce(function (initial, item) {\n      if (item) {\n        var parts = item.split(\"=\");\n        initial[parts[0]] = decodeURIComponent(parts[1]);\n      }\n\n      return initial;\n    }, {});\n    window.location.hash = \"\";\n    let _token = hash.access_token;\n\n    if (_token) {\n      changeLoginSuccess(true);\n      setTimeout(function () {\n        changeLoginSuccess(false);\n      }, 2000);\n    }\n\n    return _token;\n  };\n\n  const onGenreClick = name => {\n    let newState;\n\n    if (!genreState.includes(name) && genreState.length < 3) {\n      newState = genreState;\n      newState.push(name);\n      changeGenreState([...newState]);\n    } else {\n      const indexOfItem = genreState.indexOf(name);\n      if (indexOfItem === -1) return;\n      newState = genreState;\n      newState.splice(indexOfItem, 1);\n      changeGenreState([...newState]);\n    }\n  };\n\n  const onGenresError = () => {\n    setIsGenresError(true);\n    setTimeout(function () {\n      setIsGenresError(false);\n    }, 2000);\n  };\n\n  const onLoginError = () => {\n    setIsLoginError(true);\n    setTimeout(function () {\n      setIsLoginError(false);\n    }, 2000);\n  };\n\n  const renderGenres = genres => {\n    return genres.map((item, index) => React.createElement(\"div\", {\n      className: \"px-1 col-6 col-sm-5 col-md-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(Button, {\n      key: index,\n      type: \"quiz-empty\",\n      title: item.genre,\n      action: () => onGenreClick(item.genre),\n      colors: genreState.includes(item.genre) ? \"bg-primary text-white\" : \"bg-white text-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    })));\n  };\n\n  return React.createElement(\"div\", {\n    className: \"quiz h-100 content-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, isLoginSuccess ? React.createElement(Alert, {\n    message: \"You have logged in successfully!\",\n    isSuccess: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }) : null, isLoginError ? React.createElement(Alert, {\n    message: \"Please login first!\",\n    isSuccess: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }) : null, isGenresError ? React.createElement(Alert, {\n    message: \"Please choose at least one genre first!\",\n    isSuccess: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }) : null, React.createElement(\"div\", {\n    className: \"heading__primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, \"Before We Start!\"), React.createElement(\"div\", {\n    className: \"d-flex align-items-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"text-white\",\n    style: {\n      fontSize: \"28px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, \"1.\"), React.createElement(Button, {\n    type: \"primary ml-3\",\n    title: \"Login with Spotify\",\n    action: () => {\n      authorizeUser();\n    },\n    colors: \"bg-black text-white\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, React.createElement(SpotifyIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"heading__secondary d-flex mb-4 mt-2 px-3 text-center text-white\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"text-white ml-3 mr-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, \"2.\"), \"Choose up to three of your favorite music genres. Save the songs that you like and transfer them right to your real Spotify playlist!\", \" \"), React.createElement(\"div\", {\n    className: \"quiz__genres row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, renderGenres(quizData)), React.createElement(Button, {\n    type: \"primary\",\n    title: \"I'm ready!\",\n    colors: \"bg-primary text-white\",\n    action: () => {\n      if (!getStorageData(\"token\")) {\n        console.log(\"here\");\n        return onLoginError();\n      }\n\n      console.log(\"genre\", genreState);\n      return !genreState.length ? onGenresError() : (setStorageData(\"selected_genres\", genreState), props.history.push(\"/explore\"));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }));\n};\n\nexport default Quiz;","map":{"version":3,"sources":["/Users/lukas/Documents/GitHub/spotify-app/src/pages/quiz/index.tsx"],"names":["React","useState","useEffect","quizData","Button","SpotifyIcon","Alert","getStorageData","setStorageData","Quiz","props","Array","genreState","changeGenreState","isLoginSuccess","changeLoginSuccess","isLoginError","setIsLoginError","isGenresError","setIsGenresError","authorizeUser","window","location","href","state","authError","history","replace","pathname","onLoginError","genresError","onGenresError","selectedGenres","token","getHash","localStorage","setItem","hash","substring","split","reduce","initial","item","parts","decodeURIComponent","_token","access_token","setTimeout","onGenreClick","name","newState","includes","length","push","indexOfItem","indexOf","splice","renderGenres","genres","map","index","genre","fontSize","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { quizData } from \"./quizData\";\nimport { Button } from \"../../components/button\";\nimport { SpotifyIcon } from \"../../svg/spotifyIcon\";\nimport { Alert } from \"../../components/alert\";\nimport { getStorageData, setStorageData } from \"../../utilities/localStorage\";\nimport \"./Quiz.css\";\nimport \"../../Shared.css\";\n\nconst Quiz = (props: any) => {\n  const [genreState, changeGenreState] = useState(new Array());\n  const [isLoginSuccess, changeLoginSuccess] = useState(false);\n  const [isLoginError, setIsLoginError] = useState(false);\n  const [isGenresError, setIsGenresError] = useState(false);\n\n  const authorizeUser = async () => {\n    window.location.href =\n      \"https://accounts.spotify.com/en/authorize?client_id=b1e047dc11e749cfb928e1d33b784a2b&response_type=token&redirect_uri=http:%2F%2Flocalhost:3000%2F&scope=playlist-modify-public\";\n  };\n\n  useEffect(() => {\n    if (props.location.state && props.location.state.authError) {\n      props.history.replace({ pathname: \"/\", state: { authError: false } });\n      onLoginError();\n      return;\n    }\n\n    if (props.location.state && props.location.state.genresError) {\n      props.history.replace({ pathname: \"/\", state: { genresError: false } });\n      onGenresError();\n      return;\n    }\n\n    const selectedGenres = getStorageData(\"selected_genres\");\n\n    if (selectedGenres) changeGenreState(selectedGenres);\n\n    const token = getHash();\n    if (token) localStorage.setItem(\"token\", token);\n    return;\n  }, []);\n\n  const getHash = () => {\n    const hash = window.location.hash\n      .substring(1)\n      .split(\"&\")\n      .reduce(function(initial: any, item) {\n        if (item) {\n          var parts = item.split(\"=\");\n          initial[parts[0]] = decodeURIComponent(parts[1]);\n        }\n        return initial;\n      }, {});\n\n    window.location.hash = \"\";\n\n    let _token = hash.access_token;\n    if (_token) {\n      changeLoginSuccess(true);\n      setTimeout(function() {\n        changeLoginSuccess(false);\n      }, 2000);\n    }\n    return _token;\n  };\n\n  const onGenreClick = (name: string) => {\n    let newState;\n    if (!genreState.includes(name) && genreState.length < 3) {\n      newState = genreState;\n      newState.push(name);\n      changeGenreState([...newState]);\n    } else {\n      const indexOfItem = genreState.indexOf(name);\n\n      if (indexOfItem === -1) return;\n\n      newState = genreState;\n      newState.splice(indexOfItem, 1);\n\n      changeGenreState([...newState]);\n    }\n  };\n\n  const onGenresError = () => {\n    setIsGenresError(true);\n    setTimeout(function() {\n      setIsGenresError(false);\n    }, 2000);\n  };\n\n  const onLoginError = () => {\n    setIsLoginError(true);\n    setTimeout(function() {\n      setIsLoginError(false);\n    }, 2000);\n  };\n\n  const renderGenres = (genres: { genre: string }[]) => {\n    return genres.map((item, index: number) => (\n      <div className=\"px-1 col-6 col-sm-5 col-md-2\">\n        <Button\n          key={index}\n          type={\"quiz-empty\"}\n          title={item.genre}\n          action={() => onGenreClick(item.genre)}\n          colors={\n            genreState.includes(item.genre)\n              ? \"bg-primary text-white\"\n              : \"bg-white text-primary\"\n          }\n        />\n      </div>\n    ));\n  };\n\n  return (\n    <div className=\"quiz h-100 content-wrapper\">\n      {isLoginSuccess ? (\n        <Alert message={\"You have logged in successfully!\"} isSuccess={true} />\n      ) : null}\n      {isLoginError ? (\n        <Alert message={\"Please login first!\"} isSuccess={false} />\n      ) : null}\n      {isGenresError ? (\n        <Alert\n          message={\"Please choose at least one genre first!\"}\n          isSuccess={false}\n        />\n      ) : null}\n      <div className=\"heading__primary\">Before We Start!</div>\n      <div className=\"d-flex align-items-center\">\n        <div className=\"text-white\" style={{ fontSize: \"28px\" }}>\n          1.\n        </div>\n        <Button\n          type={\"primary ml-3\"}\n          title={\"Login with Spotify\"}\n          action={() => {\n            authorizeUser();\n          }}\n          colors={\"bg-black text-white\"}\n        >\n          <SpotifyIcon />\n        </Button>\n      </div>\n      <div className=\"heading__secondary d-flex mb-4 mt-2 px-3 text-center text-white\">\n        <div className=\"text-white ml-3 mr-2\">\n          2.\n        </div>\n        Choose up to three of your favorite music genres. Save the songs that\n        you like and transfer them right to your real Spotify playlist!{\" \"}\n      </div>\n      <div className=\"quiz__genres row\">{renderGenres(quizData)}</div>\n\n      <Button\n        type={\"primary\"}\n        title={\"I'm ready!\"}\n        colors={\"bg-primary text-white\"}\n        action={() => {\n          if (!getStorageData(\"token\")) {\n            console.log(\"here\");\n            return onLoginError();\n          }\n          console.log(\"genre\", genreState);\n          return !genreState.length\n            ? onGenresError()\n            : (setStorageData(\"selected_genres\", genreState),\n              props.history.push(\"/explore\"));\n        }}\n      />\n    </div>\n  );\n};\n\nexport default Quiz;\n"]},"metadata":{},"sourceType":"module"}