{"ast":null,"code":"import _slicedToArray from \"/Users/lukas/Documents/GitHub/spotify-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/lukas/Documents/GitHub/spotify-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/lukas/Documents/GitHub/spotify-app/src/pages/savedSongs/index.tsx\";\n\nfunction _templateObject4() {\n  const data = _taggedTemplateLiteral([\"\\n          {\\n            userPlaylists(username: $username) {\\n              id\\n              name\\n            }\\n          }\\n        \"]);\n\n  _templateObject4 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  const data = _taggedTemplateLiteral([\"\\n          {\\n            userDetails {\\n              display_name\\n            }\\n          }\\n        \"]);\n\n  _templateObject3 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n  query userPlaylists($username: String!) {\\n    userPlaylists(username: $username) {\\n      id\\n      name\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  query SavedTracks($savedTracks: [String!]!) {\\n    savedTracks(savedTracks: $savedTracks) {\\n      id\\n      name\\n      artists {\\n        name\\n      }\\n      preview_url\\n      album {\\n        images {\\n          url\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useEffect, Fragment, useState } from \"react\";\nimport gql from \"graphql-tag\";\nimport { Button } from \"../../components/button\";\nimport { client } from \"../../App\";\nimport { Card } from \"./card\";\nimport { CardBody } from \"../../components/cardBody\";\nimport { Query } from \"react-apollo\";\nimport { getStorageData } from \"../../utilities/localStorage\";\nimport \"./SavedSongs.css\";\nconst SAVED_TRACKS_QUERY = gql(_templateObject());\nconst USER_PLAYLISTS_QUERY = gql(_templateObject2());\n\nconst SavedSongs = () => {\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        username = _useState2[0],\n        setUsername = _useState2[1];\n\n  const _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        playlist = _useState4[0],\n        changePlaylist = _useState4[1];\n\n  const _useState5 = useState([]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        userPlaylists = _useState6[0],\n        setUserPlaylists = _useState6[1];\n\n  const _useState7 = useState(\"\"),\n        _useState8 = _slicedToArray(_useState7, 2),\n        songIds = _useState8[0],\n        setSongIds = _useState8[1];\n\n  useEffect(() => {\n    const ids = getStorageData(\"saved_tracks\");\n    setSongIds(ids);\n    client.query({\n      query: gql(_templateObject3())\n    }).then(result => setUsername(result.data.userDetails.display_name)).catch(err => console.log(\"ERROR\", err));\n    client.query({\n      query: gql(_templateObject4())\n    }).then(result => setUserPlaylists(result.data.userPlaylists)).catch(err => console.log(\"ERROR\", err));\n  }, []);\n\n  const handleSelectChange = value => {\n    changePlaylist(value);\n  };\n\n  const renderSongs = songs => {\n    return songs.map((song, index) => React.createElement(\"div\", {\n      className: \"d-flex justify-content-center align-items-center flex-column col-12 col-sm-6 col-md-4 p-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(Card, {\n      key: index,\n      image: song.album.images.url,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }), React.createElement(CardBody, {\n      artists: song.artists,\n      preview_url: song.preview_url,\n      name: song.name,\n      style: {\n        name: \"heading__primary-small mb-2 mt-2 text-center\",\n        artist: \"heading__secondary-small mb-4 text-center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    })));\n  };\n\n  const renderPlaylists = arr => arr.map((item, index) => React.createElement(\"option\", {\n    key: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, item.name));\n\n  return songIds ? React.createElement(Query, {\n    query: SAVED_TRACKS_QUERY,\n    variables: {\n      savedTracks: songIds\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, props => {\n    if (props.loading) return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"Loading...\");\n    if (props.error) console.log(\"error\", props.error);else {\n      return username ? React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"d-flex justify-content-center align-items-center mt-5 mb-3 flex-column\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"heading__primary mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, \"Choose your playlist\"), React.createElement(\"select\", {\n        className: \"select-input\",\n        onChange: e => handleSelectChange(e.target.value),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, renderPlaylists(props.data.userPlaylists)), React.createElement(Button, {\n        type: \"primary\",\n        title: \"Add these songs to \\\"\".concat(playlist, \"\\\"\"),\n        action: () => {},\n        colors: {\n          backgroundColor: \"rgb(255, 78, 80)\",\n          color: \"#fff\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, renderSongs(props.data.savedTracks))) : null;\n    }\n  }) : null;\n};\n\nexport default SavedSongs;","map":{"version":3,"sources":["/Users/lukas/Documents/GitHub/spotify-app/src/pages/savedSongs/index.tsx"],"names":["React","useEffect","Fragment","useState","gql","Button","client","Card","CardBody","Query","getStorageData","SAVED_TRACKS_QUERY","USER_PLAYLISTS_QUERY","SavedSongs","username","setUsername","playlist","changePlaylist","userPlaylists","setUserPlaylists","songIds","setSongIds","ids","query","then","result","data","userDetails","display_name","catch","err","console","log","handleSelectChange","value","renderSongs","songs","map","song","index","album","images","url","artists","preview_url","name","artist","renderPlaylists","arr","item","savedTracks","props","loading","error","e","target","backgroundColor","color"],"mappings":"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","sourcesContent":["import React, { useEffect, Fragment, useState } from \"react\";\nimport gql from \"graphql-tag\";\nimport { Button } from \"../../components/button\";\nimport { client } from \"../../App\";\nimport { Card } from \"./card\";\nimport { CardBody } from \"../../components/cardBody\";\nimport { Query } from \"react-apollo\";\nimport { getStorageData } from \"../../utilities/localStorage\";\nimport \"./SavedSongs.css\";\n\nconst SAVED_TRACKS_QUERY = gql`\n  query SavedTracks($savedTracks: [String!]!) {\n    savedTracks(savedTracks: $savedTracks) {\n      id\n      name\n      artists {\n        name\n      }\n      preview_url\n      album {\n        images {\n          url\n        }\n      }\n    }\n  }\n`;\n\nconst USER_PLAYLISTS_QUERY = gql`\n  query userPlaylists($username: String!) {\n    userPlaylists(username: $username) {\n      id\n      name\n    }\n  }\n`;\n\nconst SavedSongs = () => {\n  const [username, setUsername] = useState(\"\");\n  const [playlist, changePlaylist] = useState(\"\");\n  const [userPlaylists, setUserPlaylists] = useState([]);\n  const [songIds, setSongIds] = useState(\"\");\n\n  useEffect(() => {\n    const ids = getStorageData(\"saved_tracks\");\n    setSongIds(ids);\n    client\n      .query({\n        query: gql`\n          {\n            userDetails {\n              display_name\n            }\n          }\n        `\n      })\n      .then(result => setUsername(result.data.userDetails.display_name))\n      .catch(err => console.log(\"ERROR\", err));\n\n    client\n      .query({\n        query: gql`\n          {\n            userPlaylists(username: $username) {\n              id\n              name\n            }\n          }\n        `\n      })\n      .then(result => setUserPlaylists(result.data.userPlaylists))\n      .catch(err => console.log(\"ERROR\", err));\n  }, []);\n\n  const handleSelectChange = (value: string) => {\n    changePlaylist(value);\n  };\n\n  const renderSongs = (songs: any) => {\n    return songs.map((song: any, index: number) => (\n      <div className=\"d-flex justify-content-center align-items-center flex-column col-12 col-sm-6 col-md-4 p-3\">\n        <Card key={index} image={song.album.images.url} />\n        <CardBody\n          artists={song.artists}\n          preview_url={song.preview_url}\n          name={song.name}\n          style={{\n            name: \"heading__primary-small mb-2 mt-2 text-center\",\n            artist: \"heading__secondary-small mb-4 text-center\"\n          }}\n        />\n      </div>\n    ));\n  };\n\n  const renderPlaylists = (arr: { name: string; id: string }[]) =>\n    arr.map((item, index) => <option key={index}>{item.name}</option>);\n\n  return songIds ? (\n    <Query query={SAVED_TRACKS_QUERY} variables={{ savedTracks: songIds }}>\n      {(props: any) => {\n        if (props.loading) return <div>Loading...</div>;\n        if (props.error) console.log(\"error\", props.error);\n        else {\n          return username ?\n                (<Fragment>\n              <div className=\"d-flex justify-content-center align-items-center mt-5 mb-3 flex-column\">\n                <div className=\"heading__primary mb-3\">\n                  Choose your playlist\n                </div>\n                <select\n                  className=\"select-input\"\n                  onChange={e => handleSelectChange(e.target.value)}\n                >\n                  {renderPlaylists(props.data.userPlaylists)}\n                </select>\n                <Button\n                  type={\"primary\"}\n                  title={`Add these songs to \"${playlist}\"`}\n                  action={() => {}}\n                  colors={{\n                    backgroundColor: \"rgb(255, 78, 80)\",\n                    color: \"#fff\"\n                  }}\n                />\n              </div>\n\n              <div className=\"row\">{renderSongs(props.data.savedTracks)}</div>\n                </Fragment>) : null;\n                \n           \n          \n        }\n      }}\n    </Query>\n  ) : null;\n};\n\nexport default SavedSongs;\n"]},"metadata":{},"sourceType":"module"}