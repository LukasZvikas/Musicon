{"ast":null,"code":"import _slicedToArray from \"/Users/lukas/Documents/GitHub/spotify-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/lukas/Documents/GitHub/spotify-app/src/pages/quiz/index.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { quizData } from \"./quizData\";\nimport { Button } from \"../../components/button\";\nimport \"./Quiz.css\";\nimport \"../../Shared.css\";\n\nconst Quiz = () => {\n  const _useState = useState(Array()),\n        _useState2 = _slicedToArray(_useState, 2),\n        genreState = _useState2[0],\n        changeGenreState = _useState2[1];\n\n  const authorizeUser = async () => {\n    window.location.href = \"https://accounts.spotify.com/en/authorize?client_id=b1e047dc11e749cfb928e1d33b784a2b&response_type=token&redirect_uri=http:%2F%2Flocalhost:3000%2Fdashboard\";\n  };\n\n  useEffect(() => {\n    const token = getHash();\n    if (token) localStorage.setItem(\"token\", token);\n    return;\n  });\n\n  const getHash = () => {\n    const hash = window.location.hash.substring(1).split(\"&\").reduce(function (initial, item) {\n      if (item) {\n        var parts = item.split(\"=\");\n        initial[parts[0]] = decodeURIComponent(parts[1]);\n      }\n\n      return initial;\n    }, {});\n    console.log(\"hash\", hash);\n    window.location.hash = \"\"; // Set token\n\n    let _token = hash.access_token;\n    return _token;\n  };\n\n  const onGenreClick = name => {\n    const newState = genreState;\n    newState.push(name);\n    changeGenreState([...newState]);\n  };\n\n  const renderGenres = genres => {\n    return genres.map((item, index) => React.createElement(\"div\", {\n      className: \"col-5 col-sm-3 col-md-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(Button, {\n      key: index,\n      type: \"quiz-empty\",\n      title: item.genre,\n      action: () => onGenreClick(item.genre),\n      fill: genreState.includes(item.genre),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    })));\n  };\n\n  return React.createElement(\"div\", {\n    className: \"quiz h-100\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(Button, {\n    type: \"primary\",\n    title: \"Login with Spotify\",\n    action: () => {\n      authorizeUser();\n    },\n    fill: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"heading__primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"Before We Start!\"), React.createElement(\"div\", {\n    className: \"heading__secondary m-4 text-center text-white\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"Please choose up to three of your favorite music genres.\", \" \"), React.createElement(\"div\", {\n    className: \"quiz__genres row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, renderGenres(quizData)), React.createElement(Link, {\n    to: {\n      pathname: \"/dashboard\",\n      state: genreState\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(Button, {\n    type: \"primary\",\n    title: \"I'm ready!\",\n    action: () => {},\n    fill: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  })));\n};\n\nexport default Quiz;","map":{"version":3,"sources":["/Users/lukas/Documents/GitHub/spotify-app/src/pages/quiz/index.tsx"],"names":["React","useState","useEffect","Link","quizData","Button","Quiz","Array","genreState","changeGenreState","authorizeUser","window","location","href","token","getHash","localStorage","setItem","hash","substring","split","reduce","initial","item","parts","decodeURIComponent","console","log","_token","access_token","onGenreClick","name","newState","push","renderGenres","genres","map","index","genre","includes","pathname","state"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { quizData } from \"./quizData\";\nimport { Button } from \"../../components/button\";\nimport \"./Quiz.css\";\nimport \"../../Shared.css\";\n\nconst Quiz = () => {\n  const [genreState, changeGenreState] = useState(Array());\n\n  const authorizeUser = async () => {\n    window.location.href =\n      \"https://accounts.spotify.com/en/authorize?client_id=b1e047dc11e749cfb928e1d33b784a2b&response_type=token&redirect_uri=http:%2F%2Flocalhost:3000%2Fdashboard\";\n  };\n\n  useEffect(() => {\n    const token = getHash();\n    if (token) localStorage.setItem(\"token\", token);\n    return;\n  });\n\n  const getHash = () => {\n    const hash = window.location.hash\n      .substring(1)\n      .split(\"&\")\n      .reduce(function(initial: any, item) {\n        if (item) {\n          var parts = item.split(\"=\");\n          initial[parts[0]] = decodeURIComponent(parts[1]);\n        }\n        return initial;\n      }, {});\n    console.log(\"hash\", hash);\n    window.location.hash = \"\";\n\n    // Set token\n    let _token = hash.access_token;\n    return _token;\n  };\n\n  const onGenreClick = (name: string) => {\n    const newState = genreState;\n    newState.push(name);\n    changeGenreState([...newState]);\n  };\n\n  const renderGenres = (genres: { genre: string }[]) => {\n    return genres.map((item, index: number) => (\n      <div className=\"col-5 col-sm-3 col-md-2\">\n        <Button\n          key={index}\n          type={\"quiz-empty\"}\n          title={item.genre}\n          action={() => onGenreClick(item.genre)}\n          fill={genreState.includes(item.genre)}\n        />\n      </div>\n    ));\n  };\n\n  return (\n    <div className=\"quiz h-100\">\n      <Button\n        type={\"primary\"}\n        title={\"Login with Spotify\"}\n        action={() => {\n          authorizeUser();\n        }}\n        fill={true}\n      />\n      <div className=\"heading__primary\">Before We Start!</div>\n      <div className=\"heading__secondary m-4 text-center text-white\">\n        Please choose up to three of your favorite music genres.{\" \"}\n      </div>\n      <div className=\"quiz__genres row\">{renderGenres(quizData)}</div>\n      <Link to={{ pathname: \"/dashboard\", state: genreState }}>\n        <Button\n          type={\"primary\"}\n          title={\"I'm ready!\"}\n          action={() => {}}\n          fill={true}\n        />\n      </Link>\n    </div>\n  );\n};\n\nexport default Quiz;\n"]},"metadata":{},"sourceType":"module"}