{"ast":null,"code":"import _slicedToArray from \"/Users/lukas/Documents/GitHub/spotify-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/lukas/Documents/GitHub/spotify-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/lukas/Documents/GitHub/spotify-app/src/pages/dashboard/index.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  query TracksQuery($selectedGenres: [String!]!) {\\n    suggestedTracks(selectedGenres: $selectedGenres) {\\n      id\\n      name\\n      artists {\\n        name\\n      }\\n      preview_url\\n      album {\\n        images {\\n          url\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, Fragment, useEffect } from \"react\";\nimport { updateStorageData, getStorageData } from \"../../utilities/localStorage\";\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport { SwipeCard } from \"./swipeCard\";\nimport { CardBody } from \"../../components/cardBody\";\nimport { Button } from \"../../components/button\";\nimport \"../../Shared.css\";\nimport \"./Dashboard.css\";\nconst TRACKS_QUERY = gql(_templateObject());\n\nconst Dashboard = props => {\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        currentIndex = _useState2[0],\n        updateIndex = _useState2[1];\n\n  useEffect(() => {\n    const token = getHash();\n    if (token) localStorage.setItem(\"token\", token);\n    return;\n  });\n\n  const getHash = () => {\n    const hash = window.location.hash.substring(1).split(\"&\").reduce(function (initial, item) {\n      if (item) {\n        var parts = item.split(\"=\");\n        initial[parts[0]] = decodeURIComponent(parts[1]);\n      }\n\n      return initial;\n    }, {});\n    window.location.hash = \"\";\n    let _token = hash.access_token;\n    return _token;\n  };\n\n  const nextSong = () => {\n    updateIndex(currentIndex + 1);\n    document.querySelector(\".card__audio-bar\").load();\n  };\n\n  const previousSong = () => {\n    updateIndex(currentIndex - 1);\n    document.querySelector(\".card__audio-bar\").load();\n  };\n\n  console.log(\"props\", props.location.state);\n  return React.createElement(\"div\", {\n    className: \"d-flex justify-content-center align-items-center h-100 flex-column\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(Query, {\n    query: TRACKS_QUERY,\n    variables: {\n      selectedGenres: props.location.state\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, ({\n    loading,\n    error,\n    data\n  }) => {\n    if (loading) return React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"LOADING...\");\n    if (error) console.log(\"error\", error);else {\n      console.log(\"DATA\", data);\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(SwipeCard, {\n        nextSong: () => nextSong(),\n        previousSong: () => previousSong(),\n        image: data.suggestedTracks[currentIndex].album.images.url,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }), React.createElement(CardBody, {\n        artists: data.suggestedTracks[currentIndex].artists,\n        name: data.suggestedTracks[currentIndex].name,\n        preview_url: data.suggestedTracks[currentIndex].preview_url,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }), React.createElement(Button, {\n        type: \"primary\",\n        title: \"Add to playlist\",\n        action: () => updateStorageData(\"saved_tracks\", data.suggestedTracks[currentIndex].id),\n        fill: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }));\n    }\n  }));\n};\n\nexport default Dashboard;","map":{"version":3,"sources":["/Users/lukas/Documents/GitHub/spotify-app/src/pages/dashboard/index.js"],"names":["React","useState","Fragment","useEffect","updateStorageData","getStorageData","gql","Query","SwipeCard","CardBody","Button","TRACKS_QUERY","Dashboard","props","currentIndex","updateIndex","token","getHash","localStorage","setItem","hash","window","location","substring","split","reduce","initial","item","parts","decodeURIComponent","_token","access_token","nextSong","document","querySelector","load","previousSong","console","log","state","selectedGenres","loading","error","data","suggestedTracks","album","images","url","artists","name","preview_url","id"],"mappings":"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","sourcesContent":["import React, { useState, Fragment, useEffect } from \"react\";\nimport {\n  updateStorageData,\n  getStorageData\n} from \"../../utilities/localStorage\";\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport { SwipeCard } from \"./swipeCard\";\nimport { CardBody } from \"../../components/cardBody\";\nimport { Button } from \"../../components/button\";\nimport \"../../Shared.css\";\nimport \"./Dashboard.css\";\n\nconst TRACKS_QUERY = gql`\n  query TracksQuery($selectedGenres: [String!]!) {\n    suggestedTracks(selectedGenres: $selectedGenres) {\n      id\n      name\n      artists {\n        name\n      }\n      preview_url\n      album {\n        images {\n          url\n        }\n      }\n    }\n  }\n`;\n\nconst Dashboard = props => {\n  const [currentIndex, updateIndex] = useState(0);\n\n  useEffect(() => {\n    const token = getHash();\n    if (token) localStorage.setItem(\"token\", token);\n    return;\n  });\n\n  const getHash = () => {\n    const hash = window.location.hash\n      .substring(1)\n      .split(\"&\")\n      .reduce(function(initial, item) {\n        if (item) {\n          var parts = item.split(\"=\");\n          initial[parts[0]] = decodeURIComponent(parts[1]);\n        }\n        return initial;\n      }, {});\n \n    window.location.hash = \"\";\n\n    let _token = hash.access_token;\n    return _token;\n  };\n\n  const nextSong = () => {\n    updateIndex(currentIndex + 1);\n    document.querySelector(\".card__audio-bar\").load();\n  };\n\n  const previousSong = () => {\n    updateIndex(currentIndex - 1);\n    document.querySelector(\".card__audio-bar\").load();\n  };\n\n  console.log(\"props\", props.location.state);\n  return (\n    <div className=\"d-flex justify-content-center align-items-center h-100 flex-column\">\n      <Query\n        query={TRACKS_QUERY}\n        variables={{ selectedGenres: props.location.state }}\n      >\n        {({ loading, error, data }) => {\n          if (loading) return <h4>LOADING...</h4>;\n          if (error) console.log(\"error\", error);\n          else {\n            console.log(\"DATA\", data);\n            return (\n              <Fragment>\n                <SwipeCard\n                  nextSong={() => nextSong()}\n                  previousSong={() => previousSong()}\n                  image={data.suggestedTracks[currentIndex].album.images.url}\n                />\n\n                <CardBody\n                  artists={data.suggestedTracks[currentIndex].artists}\n                  name={data.suggestedTracks[currentIndex].name}\n                  preview_url={data.suggestedTracks[currentIndex].preview_url}\n                />\n                <Button\n                  type={\"primary\"}\n                  title={\"Add to playlist\"}\n                  action={() =>\n                    updateStorageData(\n                      \"saved_tracks\",\n                      data.suggestedTracks[currentIndex].id\n                    )\n                  }\n                  fill={true}\n                />\n              </Fragment>\n            );\n          }\n        }}\n      </Query>\n    </div>\n  );\n};\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}