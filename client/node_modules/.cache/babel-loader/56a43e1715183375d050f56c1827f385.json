{"ast":null,"code":"import _slicedToArray from \"/Users/lukas/Documents/GitHub/spotify-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/lukas/Documents/GitHub/spotify-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/lukas/Documents/GitHub/spotify-app/src/pages/savedSongs/index.tsx\";\n\nfunction _templateObject4() {\n  const data = _taggedTemplateLiteral([\"\\n            query addToPlaylist($songIds: [String!]!, $playlist_id: String!) {\\n              addToPlaylist(songIds: $songIds, playlist_id: $playlist_id) {\\n                snapshot_id\\n              }\\n            }\\n          \"]);\n\n  _templateObject4 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  const data = _taggedTemplateLiteral([\"\\n          query userPlaylists($username: String!) {\\n            userPlaylists(username: $username) {\\n              id\\n              name\\n            }\\n          }\\n        \"]);\n\n  _templateObject3 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n          {\\n            userDetails {\\n              display_name\\n            }\\n          }\\n        \"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  query SavedTracks($savedTracks: [String!]!) {\\n    savedTracks(savedTracks: $savedTracks) {\\n      id\\n      name\\n      artists {\\n        name\\n      }\\n      preview_url\\n      album {\\n        images {\\n          url\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useEffect, Fragment, useState } from \"react\";\nimport gql from \"graphql-tag\";\nimport { Button } from \"../../components/button\";\nimport { client } from \"../../App\";\nimport { Card } from \"./card\";\nimport { Modal } from \"../../components/modal\";\nimport { PlaylistModalBody } from \"./playlistModalBody\";\nimport { CardBody } from \"../../components/cardBody\";\nimport { Alert } from \"../../components/alert\";\nimport { Query } from \"react-apollo\";\nimport { getStorageData, setStorageData } from \"../../utilities/localStorage\";\nimport \"./SavedSongs.css\";\nconst SAVED_TRACKS_QUERY = gql(_templateObject());\n\nconst SavedSongs = () => {\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        username = _useState2[0],\n        setUsername = _useState2[1];\n\n  const _useState3 = useState({\n    id: \"\",\n    name: \"\"\n  }),\n        _useState4 = _slicedToArray(_useState3, 2),\n        currentPlaylist = _useState4[0],\n        setCurrentPlaylist = _useState4[1];\n\n  const _useState5 = useState([]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        userPlaylists = _useState6[0],\n        setUserPlaylists = _useState6[1];\n\n  const _useState7 = useState(\"\"),\n        _useState8 = _slicedToArray(_useState7, 2),\n        songIds = _useState8[0],\n        setSongIds = _useState8[1];\n\n  const _useState9 = useState([]),\n        _useState10 = _slicedToArray(_useState9, 2),\n        savedSongs = _useState10[0],\n        setSavedSongs = _useState10[1];\n\n  const _useState11 = useState(false),\n        _useState12 = _slicedToArray(_useState11, 2),\n        modalState = _useState12[0],\n        setModalState = _useState12[1];\n\n  const _useState13 = useState(\"\"),\n        _useState14 = _slicedToArray(_useState13, 2),\n        isSavedPlaylist = _useState14[0],\n        setIsSavedPlaylist = _useState14[1];\n\n  useEffect(() => {\n    const ids = getStorageData(\"saved_tracks\");\n    setSongIds(ids);\n    client.query({\n      query: gql(_templateObject2())\n    }).then(({\n      data: {\n        userDetails: {\n          display_name\n        }\n      }\n    }) => {\n      playlistQuery(display_name);\n      setUsername(display_name);\n    }).catch(err => console.log(\"ERROR\", err));\n  }, []);\n\n  const playlistQuery = username => {\n    client.query({\n      query: gql(_templateObject3()),\n      variables: {\n        username\n      }\n    }).then(result => {\n      setCurrentPlaylist(result.data.userPlaylists[0]);\n      setUserPlaylists(result.data.userPlaylists);\n    }).catch(err => console.log(\"ERROR\", err));\n  };\n\n  const addToPlaylistQuery = () => {\n    if (currentPlaylist.id) client.query({\n      query: gql(_templateObject4()),\n      variables: {\n        songIds: getStorageData(\"saved_tracks\"),\n        playlist_id: currentPlaylist.id\n      }\n    }).then(result => {\n      setIsSavedPlaylist(result.data.addToPlaylist.snapshot_id);\n      setTimeout(function () {\n        setIsSavedPlaylist(\"\");\n      }, 2000);\n    }).catch(err => console.log(\"ERROR\", err));\n  };\n\n  const removeSong = trackId => {\n    const songIds = getStorageData(\"saved_tracks\");\n    const newSongIds = songIds.filter(item => item !== trackId);\n    const newSongTracks = savedSongs.filter(item => item.id !== trackId);\n    setStorageData(\"saved_tracks\", newSongIds);\n    setSavedSongs(newSongTracks);\n  };\n\n  const handleSelectChange = value => {\n    setCurrentPlaylist(value);\n  };\n\n  const renderSongs = songs => {\n    return songs.map((song, index) => React.createElement(\"div\", {\n      className: \"d-flex justify-content-center align-items-center flex-column col-12 col-md-6 col-lg-4 p-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(Card, {\n      key: index,\n      image: song.album.images.url,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), React.createElement(CardBody, {\n      artists: song.artists,\n      preview_url: song.preview_url,\n      name: song.name,\n      style: {\n        name: \"heading__primary-small mb-2 mt-2 text-center\",\n        artist: \"heading__secondary-small mb-4 text-center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"heading__secondary-small mt-2\",\n      style: {\n        color: \"rgb(255, 78, 80)\",\n        cursor: \"pointer\"\n      },\n      onClick: () => {\n        console.log(\"song\", song);\n        removeSong(song.id);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, \"Remove this song\")));\n  };\n\n  const getPlaylistId = name => {\n    const playlist = userPlaylists.filter(item => item.name === name);\n    return playlist[0].id;\n  };\n\n  const renderPlaylists = arr => arr.map((item, index) => React.createElement(\"option\", {\n    key: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, item.name));\n\n  const changeModalState = () => {\n    return setModalState(!modalState);\n  };\n\n  return songIds ? React.createElement(Query, {\n    query: SAVED_TRACKS_QUERY,\n    variables: {\n      savedTracks: songIds\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, props => {\n    if (props.loading) return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, \"Loading...\");\n    if (props.error) console.log(\"error\", props.error);else {\n      !savedSongs.length && setSavedSongs(props.data.savedTracks);\n      console.log(\"SAVED\", savedSongs);\n      return username && currentPlaylist ? React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, isSavedPlaylist ? React.createElement(Alert, {\n        message: \"Selected songs were successfully added to your playlist\",\n        isSuccess: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }) : null, React.createElement(Modal, {\n        show: modalState,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, React.createElement(PlaylistModalBody, {\n        name: currentPlaylist.name,\n        changeModalState: () => changeModalState(),\n        addToPlaylist: () => addToPlaylistQuery(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"d-flex justify-content-center align-items-center mt-5 mb-3 flex-column\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"heading__primary mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, \"Choose your playlist\"), React.createElement(\"select\", {\n        className: \"select-input\",\n        onChange: e => handleSelectChange({\n          name: e.target.value,\n          id: getPlaylistId(e.target.value)\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, renderPlaylists(userPlaylists)), React.createElement(Button, {\n        type: \"primary\",\n        title: \"Add these songs to \\\"\".concat(currentPlaylist.name, \"\\\"\"),\n        action: () => {\n          changeModalState();\n        },\n        colors: {\n          backgroundColor: \"rgb(255, 78, 80)\",\n          color: \"#fff\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }, renderSongs(savedSongs))) : null;\n    }\n  }) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236\n    },\n    __self: this\n  }, \"Please Login\");\n};\n\nexport default SavedSongs;","map":{"version":3,"sources":["/Users/lukas/Documents/GitHub/spotify-app/src/pages/savedSongs/index.tsx"],"names":["React","useEffect","Fragment","useState","gql","Button","client","Card","Modal","PlaylistModalBody","CardBody","Alert","Query","getStorageData","setStorageData","SAVED_TRACKS_QUERY","SavedSongs","username","setUsername","id","name","currentPlaylist","setCurrentPlaylist","userPlaylists","setUserPlaylists","songIds","setSongIds","savedSongs","setSavedSongs","modalState","setModalState","isSavedPlaylist","setIsSavedPlaylist","ids","query","then","data","userDetails","display_name","playlistQuery","catch","err","console","log","variables","result","addToPlaylistQuery","playlist_id","addToPlaylist","snapshot_id","setTimeout","removeSong","trackId","newSongIds","filter","item","newSongTracks","handleSelectChange","value","renderSongs","songs","map","song","index","album","images","url","artists","preview_url","artist","color","cursor","getPlaylistId","playlist","renderPlaylists","arr","changeModalState","savedTracks","props","loading","error","length","e","target","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useEffect, Fragment, useState } from \"react\";\nimport gql from \"graphql-tag\";\nimport { Button } from \"../../components/button\";\nimport { client } from \"../../App\";\nimport { Card } from \"./card\";\nimport { Modal } from \"../../components/modal\";\nimport { PlaylistModalBody } from \"./playlistModalBody\";\nimport { CardBody } from \"../../components/cardBody\";\nimport { Alert } from \"../../components/alert\";\nimport { Query } from \"react-apollo\";\nimport { getStorageData, setStorageData } from \"../../utilities/localStorage\";\nimport \"./SavedSongs.css\";\n\nconst SAVED_TRACKS_QUERY = gql`\n  query SavedTracks($savedTracks: [String!]!) {\n    savedTracks(savedTracks: $savedTracks) {\n      id\n      name\n      artists {\n        name\n      }\n      preview_url\n      album {\n        images {\n          url\n        }\n      }\n    }\n  }\n`;\n\nconst SavedSongs = () => {\n  const [username, setUsername] = useState(\"\");\n  const [currentPlaylist, setCurrentPlaylist] = useState({ id: \"\", name: \"\" });\n  const [userPlaylists, setUserPlaylists] = useState([]);\n  const [songIds, setSongIds] = useState(\"\");\n  const [savedSongs, setSavedSongs] = useState([]);\n  const [modalState, setModalState] = useState(false);\n  const [isSavedPlaylist, setIsSavedPlaylist] = useState(\"\");\n\n  useEffect(() => {\n    const ids = getStorageData(\"saved_tracks\");\n    setSongIds(ids);\n    client\n      .query({\n        query: gql`\n          {\n            userDetails {\n              display_name\n            }\n          }\n        `\n      })\n      .then(({ data: { userDetails: { display_name } } }) => {\n        playlistQuery(display_name);\n        setUsername(display_name);\n      })\n      .catch(err => console.log(\"ERROR\", err));\n  }, []);\n\n  const playlistQuery = (username: string) => {\n    client\n      .query({\n        query: gql`\n          query userPlaylists($username: String!) {\n            userPlaylists(username: $username) {\n              id\n              name\n            }\n          }\n        `,\n        variables: { username }\n      })\n      .then(result => {\n        setCurrentPlaylist(result.data.userPlaylists[0]);\n        setUserPlaylists(result.data.userPlaylists);\n      })\n      .catch(err => console.log(\"ERROR\", err));\n  };\n\n  const addToPlaylistQuery = () => {\n    if (currentPlaylist.id)\n      client\n        .query({\n          query: gql`\n            query addToPlaylist($songIds: [String!]!, $playlist_id: String!) {\n              addToPlaylist(songIds: $songIds, playlist_id: $playlist_id) {\n                snapshot_id\n              }\n            }\n          `,\n          variables: {\n            songIds: getStorageData(\"saved_tracks\"),\n            playlist_id: currentPlaylist.id\n          }\n        })\n        .then(result => {\n          setIsSavedPlaylist(result.data.addToPlaylist.snapshot_id);\n          setTimeout(function() {\n            setIsSavedPlaylist(\"\");\n          }, 2000);\n        })\n        .catch(err => console.log(\"ERROR\", err));\n  };\n\n  const removeSong = (trackId: string) => {\n    const songIds = getStorageData(\"saved_tracks\");\n    const newSongIds = songIds.filter((item: string) => item !== trackId);\n    const newSongTracks = savedSongs.filter((item: any) => item.id !== trackId);\n    setStorageData(\"saved_tracks\", newSongIds);\n    setSavedSongs(newSongTracks);\n  };\n\n  const handleSelectChange = (value: { name: string; id: string }) => {\n    setCurrentPlaylist(value);\n  };\n\n  const renderSongs = (\n    songs: {\n      id: string;\n      album: { images: { url: string } };\n      artists: { name: string }[];\n      preview_url: string;\n      name: string;\n    }[]\n  ) => {\n    return songs.map(\n      (\n        song: {\n          id: string;\n          album: { images: { url: string } };\n          artists: { name: string }[];\n          preview_url: string;\n          name: string;\n        },\n        index: number\n      ) => (\n        <div className=\"d-flex justify-content-center align-items-center flex-column col-12 col-md-6 col-lg-4 p-3\">\n          <Card key={index} image={song.album.images.url} />\n          <CardBody\n            artists={song.artists}\n            preview_url={song.preview_url}\n            name={song.name}\n            style={{\n              name: \"heading__primary-small mb-2 mt-2 text-center\",\n              artist: \"heading__secondary-small mb-4 text-center\"\n            }}\n          />\n          <div\n            className=\"heading__secondary-small mt-2\"\n            style={{ color: \"rgb(255, 78, 80)\", cursor: \"pointer\" }}\n            onClick={() => {\n              console.log(\"song\", song);\n              removeSong(song.id);\n            }}\n          >\n            Remove this song\n          </div>\n        </div>\n      )\n    );\n  };\n\n  const getPlaylistId = (name: string): string => {\n    const playlist: { name: string; id: string }[] = userPlaylists.filter(\n      (item: { name: string; id: string }) => item.name === name\n    );\n    return playlist[0].id;\n  };\n\n  const renderPlaylists = (arr: { name: string; id: string }[]) =>\n    arr.map((item, index) => <option key={index}>{item.name}</option>);\n\n  const changeModalState = () => {\n    return setModalState(!modalState);\n  };\n\n  return songIds ? (\n    <Query query={SAVED_TRACKS_QUERY} variables={{ savedTracks: songIds }}>\n      {(props: any) => {\n        if (props.loading) return <div>Loading...</div>;\n        if (props.error) console.log(\"error\", props.error);\n        else {\n          !savedSongs.length && setSavedSongs(props.data.savedTracks);\n          console.log(\"SAVED\", savedSongs);\n          return username && currentPlaylist ? (\n            <Fragment>\n              {isSavedPlaylist ? (\n                <Alert\n                  message={\n                    \"Selected songs were successfully added to your playlist\"\n                  }\n                  isSuccess={true}\n                />\n              ) : null}\n              <Modal show={modalState}>\n                <PlaylistModalBody\n                  name={currentPlaylist.name}\n                  changeModalState={() => changeModalState()}\n                  addToPlaylist={() => addToPlaylistQuery()}\n                />\n              </Modal>\n              <div className=\"d-flex justify-content-center align-items-center mt-5 mb-3 flex-column\">\n                <div className=\"heading__primary mb-3\">\n                  Choose your playlist\n                </div>\n                <select\n                  className=\"select-input\"\n                  onChange={e =>\n                    handleSelectChange({\n                      name: e.target.value,\n                      id: getPlaylistId(e.target.value)\n                    })\n                  }\n                >\n                  {renderPlaylists(userPlaylists)}\n                </select>\n                <Button\n                  type={\"primary\"}\n                  title={`Add these songs to \"${currentPlaylist.name}\"`}\n                  action={() => {\n                    changeModalState();\n                  }}\n                  colors={{\n                    backgroundColor: \"rgb(255, 78, 80)\",\n                    color: \"#fff\"\n                  }}\n                />\n              </div>\n              <div className=\"row\">{renderSongs(savedSongs)}</div>\n            </Fragment>\n          ) : null;\n        }\n      }}\n    </Query>\n  ) : <div>Please Login</div>;\n};\n\nexport default SavedSongs;\n"]},"metadata":{},"sourceType":"module"}